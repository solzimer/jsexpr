{"version":3,"sources":["../../../lib/expression.js"],"names":["extend","require","RX","fneval","obj","key","eval","err","undefined","EVALS","itval","arr","split","forEach","v","call","valwalk","src","ops","path","Object","keys","newpath","k","parse","expr","method","m","match","token","replace","trim","fn","Function","entry","tokens","JSON","stringify","list","idx","indexOf","t","substring","length","push","map","join","jsontokens","json","walk","op","value","reduce","module","exports","input"],"mappings":"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","file":"expression.js","sourcesContent":["const extend = require(\"extend\");\nconst RX = /\\$\\{[^\\}]+\\}/g;\n\nfunction fneval(obj, key) {\n\ttry {\n\t\treturn eval(\"this.\" + key);\n\t} catch (err) {\n\t\treturn undefined;\n\t}\n}\n\nconst EVALS = {\n\titval(obj,key) {\n\t\tvar arr = key.split(\".\");\n\t\tarr.forEach(key=>{\n\t\t\tif(obj==null || obj==undefined) return;\n\t\t\telse obj = obj[key];\n\t\t});\n\n\t\tlet v = obj || undefined;\n\t\treturn v===undefined? \"\" : v;\n\t},\n\teval(obj,key) {\n\t\tlet v = fneval.call(obj,obj,key);\n\t\treturn v===undefined? \"\" : v;\n\t},\n\tvalwalk(src,ops,path) {\n\t\tif(!src) return src;\n\t\tObject.keys(src).forEach(k=>{\n\t\t\tlet newpath = `${path}${path?'.':''}${k}`;\n\t\t\tif(ops[newpath])\n\t\t\tsrc[k] = ops[newpath];\n\t\t\tif(typeof(src[k])==\"object\")\n\t\t\tEVALS.valwalk(src[k],ops,newpath);\n\t\t});\n\t\treturn src;\n\t}\n}\n\nfunction parse(expr,method) {\n\tmethod = method || \"eval\";\n\tvar m = expr.match(RX);\n\tif(m) {\n\t\tm.forEach(token=>{\n\t\t\tvar key = token.replace(/[\\$\\{\\}]/g,\"\").trim();\n\t\t\texpr = expr.replace(token,\"__val(entry,'\"+key+\"')\");\n\t\t});\n\t}\n\tvar fn = new Function(\"entry\",\"__val\",\"return (\"+expr+\")\");\n\n\treturn function(entry) {\n\t\treturn fn(entry,EVALS[method]);\n\t}\n}\n\nfunction tokens(expr,method) {\n\tmethod = method || \"eval\";\n\tif(expr==\"${JSON}\") return function(entry) {return JSON.stringify(entry,null,2)};\n\n\tvar list = [];\n\tvar m = expr.match(RX)||[];\n\tm.forEach(token=>{\n\t\tvar idx = expr.indexOf(token);\n\t\tvar t = expr.substring(0,idx);\n\t\texpr = expr.substring(idx+token.length);\n\t\tlist.push(t);\n\t\tlist.push(function(entry){\n\t\t\treturn EVALS[method](entry,token.replace(/\\$|\\{|\\}/g,\"\"))\n\t\t});\n\t});\n\tlist.push(expr);\n\n\treturn function(entry) {\n\t\treturn list.map(t=>typeof(t)==\"string\"? t : t(entry)).join(\"\");\n\t}\n}\n\nfunction jsontokens(json) {\n\tlet ops = [];\n\n\tfunction walk(json,path) {\n\t\tif(!json) return;\n\t\tObject.keys(json).forEach(k=>{\n\t\t\tlet newpath = `${path}${path?'.':''}${k}`;\n\t\t\tlet t = json[k];\n\t\t\tif(typeof(t)==\"string\") {\n\t\t\t\tops.push({path:newpath,fn:tokens(t)});\n\t\t\t}\n\t\t\telse {\n\t\t\t\twalk(t,newpath);\n\t\t\t}\n\t\t});\n\t}\n\n\twalk(json,\"\");\n\n\treturn function(entry) {\n\t\tlet map = ops.map(op=>{\n\t\t\treturn {path:op.path, value:op.fn(entry)}\n\t\t}).reduce((map,op)=>{\n\t\t\tmap[op.path] = op.value;\n\t\t\treturn map;\n\t\t},{});\n\n\t\treturn EVALS.valwalk(extend(true,{},json),map,\"\");\n\t}\n}\n\nmodule.exports = {\n\tfn : parse,\n\teval : parse,\n\texpr(input){\n\t\tif(typeof(input)==\"object\")\n\t\t\treturn jsontokens(input);\n\t\telse\n\t\t\treturn tokens(input);\n\t}\n}\n"]}