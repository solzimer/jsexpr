{"version":3,"sources":["jsexpr.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","root","previous_jsexpr","jsexpr","window","expr","extend","Mingo","instance","token","RX","RegExp","RX_RPL_PARSE","RX_RPL_TOKEN","RX_JSON_TOKEN","CACHE","cacheeval","obj","key","rkey","replace","rx","fn","eval","test","fneval","err","undefined","fnassign","path","EVALS","v","iteval","arr","split","forEach","ceval","valwalk","src","ops","k","newpath","rop","parse","method","m","match","trim","Function","entry","tokens","parts","nexpr","spaces","isNaN","parseInt","fnxpr","JSON","stringify","list","len","idx","indexOf","substring","rtoken","push","filter","l","ret","jsontokens","json","walk","Object","keys","map","op","mingotokens","xpr","Array","isArray","$","aggr","Aggregator","input","res","run","exprfn","ninput","prfn","nxfn","prres","nxres","_","traverse","object","callback","assign","expression","mingo","newInstance","EV_CACHE","EX_CACHE","addOperators","OP_QUERY","$starts","selector","value","args","startsWith","$startsWith","$ends","endsWith","$endsWith","$contains","OP_EXPRESSION","$eval","$expr","$keyval","val","computeValue","reduce","item","$trim","chars","Set","has","shift","pop","join","$startsWidth","hasOwn","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isPlainObject","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","newValue","writable","getProperty","copy","copyIsArray","clone","arguments","deep","global","factory","define","amd","self","_typeof","Symbol","iterator","_classCallCheck","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_arr","_n","_d","_e","_i","_s","next","done","minLen","_arrayLikeToArray","slice","from","arr2","T_NULL","T_UNDEFINED","T_BOOL","T_BOOLEAN","T_NUMBER","T_STRING","T_DATE","T_REGEX","T_REGEXP","T_ARRAY","T_OBJECT","T_FUNCTION","JS_SIMPLE_TYPES","OP_GROUP","OP_PIPELINE","OP_PROJECTION","MISSING","includes","valueToFind","fromIndex","Math","max","abs","sameValueZero","x","y","arrayPush","assert","condition","message","cloneDeep","jsType","objectMap","into","getType","toLowerCase","isBoolean","isString","isNumber","isObject","isObjectLike","isDate","isRegExp","isFunction","isNil","isNull","isUndefined","inArray","notInArray","truthy","arg","isEmpty","ensureArray","prop","s","each","ctx","bind","objKeys","merge","opt","inputs","every","flatten","j","apply","collection","accumulator","intersection","xs","ys","hashes","hashCode","union","depth","flatten2","iter","unwrap","isEqual","b","lhs","rhs","type","ka","kb","sort","temp","encode","unique","h","toISOString","prefix","concat","hash","charCodeAt","compare","sortBy","cmp","sorted","result","groupBy","lookup","index","groups","findInsertIndex","array","lo","hi","mid","round","memoize","_this","memo","_len","_key","getValue","field","resolve","meta","resolve2","isText","acc","resolveObj","preserveMissingValues","names","isIndex","hasNext","Number","filterMissing","splice","force","setValue","removeValue","isOperator","normalize","exprKeys","some","regex","modifiers","ignoreCase","multiline","skip","limit","stddev","data","sampled","sum","N","correction","avg","sqrt","pow","moduleApi","_internal","settings","setup","systemVariables","$$ROOT","$$CURRENT","$$REMOVE","redactVariables","$$KEEP","$$PRUNE","$$DESCEND","current","elem","redactObj","SYS_VARS","REDACT_VARS","idKey","cls","OPERATORS","accumulate","operator","sysVar","substr","$abs","$add","foundDate","getTime","Date","$ceil","ceil","$divide","$exp","exp","$floor","floor","$ln","log","$log","msg","log10","$log10","$mod","$multiply","num","$pow","$round","place","Infinity","truncate","$sqrt","$subtract","$trunc","places","roundOff","sign","trunc","decimals","firstDigit","offset","remainder","lastDigit","_offset","excess","$arrayElemAt","$arrayToObject","newObj","$concatArrays","$filter","asVar","condExpr","tempObj","$in","$indexOfArray","searchValue","start","end","findIndex","$isArray","$map","inputExpr","asExpr","inExpr","tempKey","$objectToArray","$range","step","$reduce","initialValue","$reverseArray","reverse","$size","$slice","$zip","useLongestLength","defaults","zipCount","min","_loop","$mergeObjects","docs","$and","$or","$not","Lazy","source","Iterator","isIterator","isFn","dropItem","rest","DONE","LAZY_MAP","LAZY_FILTER","LAZY_TAKE","LAZY_DROP","baseIterator","nextFn","iteratees","buffer","bIndex","outer","mIndex","mSize","innerDone","member","func","__iteratees","__first","__done","__buf","size","_validate","_push","iteratee","pred","take","drop","transform","first","init","operators","__operators","__options","stream","query","pipelineOperators","Query","aggregate","pipeline","Cursor","projection","__filterFn","__query","__source","__projection","__result","__stack","_fetch","all","count","modifier","collation","criteria","__criteria","__compiled","_compile","whereOperator","_processOperator","find","remove","_this2","$eq","eq","$ne","$in$1","$nin","$lt","compare$1","$lte","$gt","$gte","$mod$1","$regex","$exists","$all","matched","$elemMatch","$size$1","format","$type","createComparison","$eq$1","$ne$1","$gt$1","$lt$1","$gte$1","$lte$1","$nin$1","$cmp","$cond","ifExpr","thenExpr","elseExpr","errorMsg","$switch","branches","validBranch","branch","then","$ifNull","$dayOfYear","d","getFullYear","diff","oneDay","$dayOfMonth","getDate","$dayOfWeek","getDay","$year","$month","getMonth","$week","setHours","setDate","yearStart","$hour","getUTCHours","$minute","getMinutes","$second","getSeconds","$millisecond","getMilliseconds","DATE_SYM_TABLE","$dateToString","fmt","date","matches","hdlr","pad","padDigits","number","digits","String","$literal","$setEquals","$setIntersection","$setDifference","$setUnion","$setIsSubset","$anyElementTrue","$allElementsTrue","$concat","$indexOfBytes","str","searchStr","valid","$split","$strLenBytes","encodeURI","$strLenCP","$strcasecmp","toUpperCase","$substrBytes","buf","utf8Encode","validIndex","begin","$substr","$substrCP","$toLower","$toUpper","UTF8_MASK","toUtf8","utf8","codePointAt","$let","varsExpr","varsKeys","expressionOperators","freeze","__proto__","$push","$addToSet","$avg","$first","$last","$max","$mergeObjects$1","$min","$stdDevPop","$stdDevSamp","$sum","groupOperators","$addFields","newFields","$set","$bucket","boundaries","defaultKey","lower","upper","outputExpr","output","boundType","grouped","boundKey","$bucketAuto","groupByExpr","bucketCount","buckets","coll","approxBucketSize","computeValueOptimized","remaining","ID_KEY","bucketItems","lastBucket","$count","$facet","$group","id","partitions","$limit","$lookup","joinColl","localField","foreignField","asField","as","$match","q","$out","$project","expressionKeys","idOnlyExcludedExpression","validateExpression","processObject","foundSlice","foundExclusion","dropKeys","subExpr","subExprKeys","projectionOperators","nestedObj","objPathValue","check","$redact","$replaceRoot","newRoot","$sample","random","$skip","$sort","sortKeys","collationSpec","locale","collationComparator","sortedIndex","indexKeys","COLLATION_STRENGTH","spec","localeOpt","sensitivity","strength","caseFirst","numeric","numericOrdering","ignorePunctuation","alternate","caseLevel","collator","Intl","Collator","$sortByCount","newExpr","$unwind","includeArrayIndex","preserveNullAndEmptyArrays","tmp","_tmp","_tmp2","_ret","$elemMatch$1","$slice$1","createQueryOperator","$all$1","$elemMatch$2","$eq$2","$exists$1","$gt$2","$gte$2","$in$2","$lt$2","$lte$2","$mod$2","$ne$2","$nin$2","$regex$1","$size$2","$type$1","$and$1","queries","$or$1","$nor","$not$1","$where","queryOperators","SYSTEM_OPERATORS","enableSystemOperators","values","opClass","newOperators","wrapped","CollectionMixin","toJSON","VERSION"],"mappings":"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","file":"jsexpr.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\r\n\r\n(function() {\r\n  var root = this\r\n  var previous_jsexpr = root.jsexpr;\r\n\tvar jsexpr = require('./index.js');\r\n\r\n\tif( typeof exports !== 'undefined' ) {\r\n    if( typeof module !== 'undefined' && module.exports ) {\r\n      exports = module.exports = jsexpr;\r\n    }\r\n    exports.jsexpr = jsexpr;\r\n  }\r\n\r\n\tif(typeof window !== 'undefined') {\r\n    window.jsexpr = jsexpr;\r\n  }\r\n\r\n}).call(this);\r\n\n},{\"./index.js\":2}],2:[function(require,module,exports){\n/*jshint esversion: 6 */\r\n\r\nconst expr = require('./lib');\r\n\r\nmodule.exports = expr;\r\n\n},{\"./lib\":4}],3:[function(require,module,exports){\nconst \r\n\textend = require(\"extend\"),\r\n\tMingo = require(\"mingo\");\r\n\r\nfunction instance(token) {\r\n\tconst RX = new RegExp(`\\\\${token}\\\\{[^\\\\}]+\\\\}`,'g');\t\t\t\t\t// /\\$\\{[^\\}]+\\}/g;\r\n\tconst RX_RPL_PARSE = new RegExp(`\\\\${token}\\\\{([^\\\\}]+)\\\\}`);\t// /\\$\\{([^\\}]+)\\}/;\r\n\tconst RX_RPL_TOKEN = new RegExp(`\\\\${token}\\\\{|\\\\}`,'g');\t\t\t\t\t// /\\$\\{|\\}/g;\r\n\tconst RX_JSON_TOKEN = new RegExp(`^\\\\${token}\\\\{JSON(:(\\\\d+|([^:]+(:(\\\\d+))?)))?\\\\}$`);\r\n\tconst CACHE = {}\r\n\r\n\tfunction cacheeval(obj,key) {\r\n\t\tif(!CACHE[key]) {\r\n\t\t\tlet rkey = key.replace(/'/g,\"\\\\'\");\r\n\t\t\tlet rx = /^[a-zA-Z$_@]/;\r\n\t\t\tlet fn = eval(`(function(){\r\n\t\t\t\tlet rx = /^[a-zA-Z$_]/;\r\n\t\t\t\treturn '${rkey}'.startsWith('this.') || '${rkey}'=='this' || !rx.test('${rkey}')?\r\n\t\t\t\t\tfunction() {\r\n\t\t\t\t\t\tlet r = undefined;\r\n\t\t\t\t\t\ttry {r=${key};}\r\n\t\t\t\t\t\tcatch(err){}\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\t} :\r\n\t\t\t\t\tfunction() {\r\n\t\t\t\t\t\tlet r = undefined;\r\n\t\t\t\t\t\ttry {r=this.${rx.test(key)? key:'$___$'};}\r\n\t\t\t\t\t\tcatch(err){try{r=${key};}catch(err){}}\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\t}\r\n\t\t\t})()`);\r\n\t\t\tCACHE[key] = fn;\r\n\t\t}\r\n\t\treturn CACHE[key].call(obj);\r\n\t}\r\n\r\n\tfunction fneval(obj, key) {\r\n\t\ttry {\r\n\t\t\treturn eval(\"this.\" + key);\r\n\t\t} catch (err) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction fnassign(path) {\r\n\t\treturn eval(`(function(path){\r\n\t\t\treturn function(obj,val) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Ensure path\r\n\t\t\t\t\tlet root = obj;\r\n\t\t\t\t\tlet kpath = path.split('.');\r\n\t\t\t\t\tfor(let i=0; i<kpath.length;i++) {\r\n\t\t\t\t\t\tlet k = kpath[i];\r\n\t\t\t\t\t\tif(!root[k]) root[k] = {};\r\n\t\t\t\t\t\troot = root[k];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn obj.${path} = val;\r\n\t\t\t\t}catch(err) {}\r\n\t\t\t}\r\n\t\t})('${path}')`);\r\n\t}\r\n\r\n\tconst EVALS = {\r\n\t\teval(obj,key) {\r\n\t\t\tlet v = fneval.call(obj,obj,key);\r\n\t\t\treturn v===undefined? \"\" : v;\r\n\t\t},\r\n\t\titeval(obj,key) {\r\n\t\t\tvar arr = key.split(\".\");\r\n\t\t\tarr.forEach(key=>{\r\n\t\t\t\tif(obj==null || obj==undefined) return;\r\n\t\t\t\telse obj = obj[key];\r\n\t\t\t});\r\n\r\n\t\t\tlet v = obj || undefined;\r\n\t\t\treturn v===undefined? \"\" : v;\r\n\t\t},\r\n\t\tceval(obj,key) {\r\n\t\t\tlet v = cacheeval(obj,key);\r\n\t\t\treturn v===undefined? \"\" : v;\r\n\t\t},\r\n\t\tvalwalk(src,ops,path) {\r\n\t\t\tif(!src) return src;\r\n\t\t\tfor(let k in src) {\r\n\t\t\t\tlet newpath = `${path}${path?'.':''}${k}`;\r\n\t\t\t\tlet rop = ops[newpath];\r\n\t\t\t\tif(rop!==undefined)\r\n\t\t\t\t\tsrc[k] = rop;\r\n\t\t\t\telse if(typeof(src[k])==\"object\")\r\n\t\t\t\t\tEVALS.valwalk(src[k],ops,newpath);\r\n\t\t\t};\r\n\t\t\treturn src;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction parse(expr,method) {\r\n\t\tmethod = method || \"ceval\";\r\n\t\tvar m = expr.match(RX);\r\n\t\tif(m) {\r\n\t\t\tm.forEach(token=>{\r\n\t\t\t\tvar key = token.replace(RX_RPL_PARSE,\"$1\").trim().replace(/'/g,\"\\\\'\");\r\n\t\t\t\texpr = expr.replace(token,\"__val(entry,'\"+key+\"')\");\r\n\t\t\t});\r\n\t\t}\r\n\t\tvar fn = new Function(\"entry\",\"__val\",\"return (\"+expr+\")\");\r\n\r\n\t\treturn function(entry) {\r\n\t\t\treturn fn(entry,EVALS[method]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction tokens(expr,method) {\r\n\t\tmethod = EVALS[method || \"ceval\"];\r\n\r\n\t\t// JSON stringify\r\n\t\tif(RX_JSON_TOKEN.test(expr)) {\r\n\t\t\tlet parts = expr.replace(RX_RPL_TOKEN,\"\").split(\":\");\r\n\t\t\tlet nexpr = parts[1];\r\n\t\t\tlet spaces = parts[2];\r\n\t\t\tif(parts.length==2) {\r\n\t\t\t\tif(isNaN(nexpr)) {spaces = 2;}\r\n\t\t\t\telse {nexpr = 'this';\tspaces = parts[1];}\r\n\t\t\t}\r\n\t\t\telse if(parts.length==1) {\r\n\t\t\t\tnexpr = 'this';\r\n\t\t\t\tspaces = 2;\r\n\t\t\t}\r\n\t\t\tspaces = parseInt(spaces);\r\n\t\t\tlet fnxpr = tokens(\"${\"+nexpr+\"}\");\r\n\t\t\treturn function(entry) {\r\n\t\t\t\treturn JSON.stringify(fnxpr(entry),null,spaces);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar list = [], len = 0;\r\n\t\tvar m = expr.match(RX)||[];\r\n\t\tm.forEach(token=>{\r\n\t\t\tvar idx = expr.indexOf(token);\r\n\t\t\tvar t = expr.substring(0,idx);\r\n\t\t\tvar rtoken = token.replace(RX_RPL_TOKEN,\"\");\r\n\t\t\texpr = expr.substring(idx+token.length);\r\n\t\t\tlist.push(t);\r\n\t\t\tlist.push(function(entry){\r\n\t\t\t\treturn method(entry,rtoken);\r\n\t\t\t});\r\n\t\t});\r\n\t\tlist.push(expr);\r\n\t\tlist = list.filter(l=>l!=\"\");\r\n\t\tlen = list.length;\r\n\r\n\t\tif(len>1) {\r\n\t\t\treturn function(entry) {\r\n\t\t\t\tlet ret = \"\";\r\n\t\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\t\tlet t = list[i];\r\n\t\t\t\t\tret += typeof(t)==\"string\"? t : t(entry);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn function(entry) {\r\n\t\t\t\tlet t = list[0];\r\n\t\t\t\treturn typeof(t)==\"string\"? t : t(entry);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction jsontokens(json) {\r\n\t\tlet ops = [], len = 0;\r\n\r\n\t\tfunction walk(json,path) {\r\n\t\t\tif(!json) return;\r\n\t\t\tObject.keys(json).forEach(k=>{\r\n\t\t\t\tlet newpath = `${path}${path?'.':''}${k}`;\r\n\t\t\t\tlet t = json[k];\r\n\t\t\t\tif(typeof(t)==\"string\") {\r\n\t\t\t\t\tops.push({path:newpath,fn:tokens(t)});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\twalk(t,newpath);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\twalk(json,\"\");\r\n\t\tlen = ops.length;\r\n\r\n\t\treturn function(entry) {\r\n\t\t\tlet map = {};\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tlet op = ops[i];\r\n\t\t\t\tmap[op.path] = op.fn(entry);\r\n\t\t\t}\r\n\t\t\treturn EVALS.valwalk(extend(true,{},json),map,\"\");\r\n\t\t}\r\n\t}\r\n\r\n\tfunction mingotokens(json) {\r\n\t\tlet xpr = Array.isArray(json.$)? json.$ : [json.$];\r\n\t\tlet aggr = new Mingo.Aggregator(xpr);\r\n\t\treturn function(input) {\r\n\t\t\tlet isArray = Array.isArray(input);\r\n\t\t\tlet res = aggr.run(isArray? input : [input]);\r\n\t\t\tif(!isArray && res.length<=1) return res[0];\r\n\t\t\telse return res;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction exprfn(input,replace){\r\n\t\tif(typeof(input)=='number') {\r\n\t\t\treturn function(obj){return input};\r\n\t\t}\r\n\t\telse if(typeof(input)==\"object\") {\r\n\t\t\tlet ninput = extend({},input);\r\n\t\t\tdelete ninput['$'];\r\n\r\n\t\t\tconst prfn = input[\"$\"] ? mingotokens(input, replace) : (input)=>input;\r\n\t\t\tconst nxfn = Object.keys(ninput).length? jsontokens(ninput,replace) : (input)=>input;\r\n\t\t\t\r\n\t\t\treturn function(obj) {\r\n\t\t\t\tlet prres = prfn(obj);\r\n\t\t\t\tlet nxres = nxfn(prres);\r\n\t\t\t\tif(typeof(nxres._)!=='undefined' && Object.keys(nxres).length==1) \r\n\t\t\t\t\treturn nxres._;\r\n\t\t\t\telse\r\n\t\t\t\t\treturn nxres;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn tokens(input);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction traverse(object,callback) {\r\n\t\tfor(let key in object) {\r\n\t\t\tobject[key] = callback(object,key,object[key]);\r\n\t\t}\r\n\r\n\t\tfor(let key in object) {\r\n\t\t\tif(typeof(object[key])=='object') {\r\n\t\t\t\ttraverse(object[key],callback);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tfn : parse,\r\n\t\teval : parse,\r\n\t\tassign : fnassign,\r\n\t\texpr : exprfn,\r\n\t\texpression : exprfn,\r\n\t\ttraverse : traverse\r\n\t}\r\n}\r\n\r\nmodule.exports = instance;\r\n\n},{\"extend\":6,\"mingo\":7}],4:[function(require,module,exports){\nlet expression = require('./expression'),\r\n\tmingo = require('./mingo_ex');\r\n\r\nlet instance = expression('$');\r\ninstance.newInstance = function(token) {\r\n\treturn expression(token);\r\n}\r\n\r\nmodule.exports = instance;\r\n\n},{\"./expression\":3,\"./mingo_ex\":5}],5:[function(require,module,exports){\nconst\r\n\tmingo = require('mingo'),\r\n\tjsexpr = require('./expression')('$');\r\n\r\nconst EV_CACHE = {};\r\nconst EX_CACHE = {};\r\n\r\nmingo.addOperators(mingo.OP_QUERY, function (_) {\r\n\treturn {\r\n\t\t$starts(selector, value, args) {\r\n\t\t\targs = Array.isArray(args) ? args : [args];\r\n\t\t\treturn (value || \"\").startsWith(args[0]);\r\n\t\t},\r\n\t\t$startsWith(selector, value, args) {\r\n\t\t\targs = Array.isArray(args) ? args : [args];\r\n\t\t\treturn (value || \"\").startsWith(args[0]);\r\n\t\t},\r\n\t\t$ends(selector, value, args) {\r\n\t\t\targs = Array.isArray(args) ? args : [args];\r\n\t\t\treturn (value || \"\").endsWith(args[0]);\r\n\t\t},\r\n\t\t$endsWith(selector, value, args) {\r\n\t\t\targs = Array.isArray(args) ? args : [args];\r\n\t\t\treturn (value || \"\").endsWith(args[0]);\r\n\t\t},\r\n\t\t$contains(selector, value, args) {\r\n\t\t\targs = Array.isArray(args) ? args : [args];\r\n\t\t\treturn (value || \"\").indexOf(args[0]) >= 0;\r\n\t\t}\r\n\t};\r\n});\r\n\r\nmingo.addOperators(mingo.OP_EXPRESSION, function (_) {\r\n\treturn {\r\n\t\t$eval(selector, value, args) {\r\n\t\t\tif (!EV_CACHE[value]) {\r\n\t\t\t\tEV_CACHE[value] = jsexpr.eval(value);\r\n\t\t\t}\r\n\t\t\treturn EV_CACHE[value](selector);\r\n\t\t},\r\n\t\t$expr(selector, value, args) {\r\n\t\t\tif (!EX_CACHE[value]) {\r\n\t\t\t\tEX_CACHE[value] = jsexpr.expr(value);\r\n\t\t\t}\r\n\t\t\treturn EX_CACHE[value](selector);\r\n\t\t},\r\n\t\t$keyval(selector, value, args) {\r\n\t\t\tlet val = _.computeValue(selector, value);\r\n\t\t\treturn val.reduce((map, item) => {\r\n\t\t\t\tmap[item[0]] = item[1] || \"_\";\r\n\t\t\t\treturn map;\r\n\t\t\t}, {});\r\n\t\t},\r\n\t\t$trim(selector, value, args) {\r\n\t\t\tlet chars = new Set((value.chars || '').split(''));\r\n\t\t\tlet val = _.computeValue(selector, value.input).split('');\r\n\t\t\twhile (chars.has(val[0])) val.shift();\r\n\t\t\twhile (chars.has(val[val.length - 1])) val.pop();\r\n\t\t\treturn val.join('');\r\n\t\t},\r\n\t\t$starts(selector, value, args) {\r\n\t\t\tlet val = _.computeValue(selector, value[0]);\r\n\t\t\treturn (val || \"\").startsWith(value[1]);\r\n\t\t},\r\n\t\t$startsWidth(selector, value, args) {\r\n\t\t\tlet val = _.computeValue(selector, value[0]);\r\n\t\t\treturn (val || \"\").startsWith(value[1]);\r\n\t\t},\r\n\t\t$ends(selector, value, args) {\r\n\t\t\tlet val = _.computeValue(selector, value[0]);\r\n\t\t\treturn (val || \"\").endsWith(value[1]);\r\n\t\t},\r\n\t\t$endsWith(selector, value, args) {\r\n\t\t\tlet val = _.computeValue(selector, value[0]);\r\n\t\t\treturn (val || \"\").endsWith(value[1]);\r\n\t\t},\r\n\t\t$contains(selector, value, args) {\r\n\t\t\tlet val = _.computeValue(selector, value[0]);\r\n\t\t\treturn (val || \"\").indexOf(value[1]) >= 0;\r\n\t\t}\r\n\t};\r\n});\r\n\r\n\r\nmodule.exports = mingo;\r\n\n},{\"./expression\":3,\"mingo\":7}],6:[function(require,module,exports){\n'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n},{}],7:[function(require,module,exports){\n//! mingo.js 2.5.3\n//! Copyright (c) 2020 Francis Asante\n//! MIT\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.mingo = factory());\n}(this, (function () { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  // Javascript native types\n  var T_NULL = 'null';\n  var T_UNDEFINED = 'undefined';\n  var T_BOOL = 'bool';\n  var T_BOOLEAN = 'boolean';\n  var T_NUMBER = 'number';\n  var T_STRING = 'string';\n  var T_DATE = 'date';\n  var T_REGEX = 'regex';\n  var T_REGEXP = 'regexp';\n  var T_ARRAY = 'array';\n  var T_OBJECT = 'object';\n  var T_FUNCTION = 'function'; // no array, object, or function types\n\n  var JS_SIMPLE_TYPES = [T_NULL, T_UNDEFINED, T_BOOLEAN, T_NUMBER, T_STRING, T_DATE, T_REGEXP]; // operator classes\n\n  var OP_EXPRESSION = 'expression';\n  var OP_GROUP = 'group';\n  var OP_PIPELINE = 'pipeline';\n  var OP_PROJECTION = 'projection';\n  var OP_QUERY = 'query';\n  var MISSING = function MISSING() {};\n\n  /**\n   * Utility functions\n   */\n\n  if (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, 'includes', {\n      value: function value(valueToFind, fromIndex) {\n        if (this == null) {\n          throw new TypeError('\"this\" is null or not defined');\n        } // 1. Let O be ? ToObject(this value).\n\n\n        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n        var len = o.length >>> 0; // 3. If len is 0, return false.\n\n        if (len === 0) {\n          return false;\n        } // 4. Let n be ? ToInteger(fromIndex).\n        //    (If fromIndex is undefined, this step produces the value 0.)\n\n\n        var n = fromIndex | 0; // 5. If n ≥ 0, then\n        //  a. Let k be n.\n        // 6. Else n < 0,\n        //  a. Let k be len + n.\n        //  b. If k < 0, let k be 0.\n\n        var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n        function sameValueZero(x, y) {\n          return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n        } // 7. Repeat, while k < len\n\n\n        while (k < len) {\n          // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n          // b. If SameValueZero(valueToFind, elementK) is true, return true.\n          if (sameValueZero(o[k], valueToFind)) {\n            return true;\n          } // c. Increase k by 1.\n\n\n          k++;\n        } // 8. Return false\n\n\n        return false;\n      }\n    });\n  }\n\n  var arrayPush = Array.prototype.push;\n  function assert(condition, message) {\n    if (!condition) err(message);\n  }\n  /**\n   * Deep clone an object\n   */\n\n  function cloneDeep(obj) {\n    switch (jsType(obj)) {\n      case T_ARRAY:\n        return obj.map(cloneDeep);\n\n      case T_OBJECT:\n        return objectMap(obj, cloneDeep);\n\n      default:\n        return obj;\n    }\n  }\n  /**\n   * Shallow clone an object\n   */\n\n  function clone(obj) {\n    switch (jsType(obj)) {\n      case T_ARRAY:\n        return into([], obj);\n\n      case T_OBJECT:\n        return Object.assign({}, obj);\n\n      default:\n        return obj;\n    }\n  }\n  function getType(v) {\n    if (v === null) return 'Null';\n    if (v === undefined) return 'Undefined';\n    return v.constructor.name;\n  }\n  function jsType(v) {\n    return getType(v).toLowerCase();\n  }\n  function isBoolean(v) {\n    return jsType(v) === T_BOOLEAN;\n  }\n  function isString(v) {\n    return jsType(v) === T_STRING;\n  }\n  function isNumber(v) {\n    return jsType(v) === T_NUMBER;\n  }\n  var isArray = Array.isArray || function (v) {\n    return !!v && v.constructor === Array;\n  };\n  function isObject(v) {\n    return !!v && v.constructor === Object;\n  }\n  function isObjectLike(v) {\n    return v === Object(v);\n  } // objects, arrays, functions, date, custom object\n\n  function isDate(v) {\n    return jsType(v) === T_DATE;\n  }\n  function isRegExp(v) {\n    return jsType(v) === T_REGEXP;\n  }\n  function isFunction(v) {\n    return jsType(v) === T_FUNCTION;\n  }\n  function isNil(v) {\n    return v === null || v === undefined;\n  }\n  function isNull(v) {\n    return v === null;\n  }\n  function isUndefined(v) {\n    return v === undefined;\n  }\n  function inArray(arr, item) {\n    return arr.includes(item);\n  }\n  function notInArray(arr, item) {\n    return !inArray(arr, item);\n  }\n  function truthy(arg) {\n    return !!arg;\n  }\n  function isEmpty(x) {\n    return isNil(x) || isArray(x) && x.length === 0 || isObject(x) && keys(x).length === 0 || !x;\n  } // ensure a value is an array\n\n  function ensureArray(x) {\n    return isArray(x) ? x : [x];\n  }\n  function has(obj, prop) {\n    return obj.hasOwnProperty(prop);\n  }\n  function err(s) {\n    throw new Error(s);\n  }\n  var keys = Object.keys; // ////////////////// UTILS ////////////////////\n\n  /**\n   * Iterate over an array or object\n   * @param  {Array|Object} obj An object-like value\n   * @param  {Function} fn The callback to run per item\n   * @param  {*}   ctx  The object to use a context\n   * @return {void}\n   */\n\n  function each(obj, fn, ctx) {\n    fn = fn.bind(ctx);\n\n    if (isArray(obj)) {\n      for (var i = 0, len = obj.length; i < len; i++) {\n        if (fn(obj[i], i, obj) === false) break;\n      }\n    } else {\n      for (var k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          if (fn(obj[k], k, obj) === false) break;\n        }\n      }\n    }\n  }\n  /**\n   * Transform values in an object\n   *\n   * @param  {Object}   obj   An object whose values to transform\n   * @param  {Function} fn The transform function\n   * @param  {*}   ctx The value to use as the \"this\" context for the transform\n   * @return {Array|Object} Result object after applying the transform\n   */\n\n  function objectMap(obj, fn, ctx) {\n    fn = fn.bind(ctx);\n    var o = {};\n    var objKeys = keys(obj);\n\n    for (var i = 0; i < objKeys.length; i++) {\n      var k = objKeys[i];\n      o[k] = fn(obj[k], k);\n    }\n\n    return o;\n  }\n  /**\n   * Deep merge objects or arrays.\n   * When the inputs have unmergeable types, the source value (right hand side) is returned.\n   * If inputs are arrays of same length and all elements are mergable, elements in the same position are merged together.\n   * If any of the elements are unmergeable, elements in the source are appended to the target.\n   * @param target {Object|Array} the target to merge into\n   * @param obj {Object|Array} the source object\n   */\n\n  function merge(target, obj) {\n    var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // take care of missing inputs\n    if (target === MISSING) return obj;\n    if (obj === MISSING) return target;\n    var inputs = [target, obj];\n\n    if (!(inputs.every(isObject) || inputs.every(isArray))) {\n      throw Error('mismatched types. must both be array or object');\n    } // default options\n\n\n    opt.flatten = opt.flatten || false;\n\n    if (isArray(target)) {\n      if (opt.flatten) {\n        var i = 0;\n        var j = 0;\n\n        while (i < target.length && j < obj.length) {\n          target[i] = merge(target[i++], obj[j++], opt);\n        }\n\n        while (j < obj.length) {\n          target.push(obj[j++]);\n        }\n      } else {\n        arrayPush.apply(target, obj);\n      }\n    } else {\n      Object.keys(obj).forEach(function (k) {\n        if (target.hasOwnProperty(k)) {\n          target[k] = merge(target[k], obj[k], opt);\n        } else {\n          target[k] = obj[k];\n        }\n      });\n    }\n\n    return target;\n  }\n  /**\n   * Reduce any array-like object\n   * @param collection\n   * @param fn\n   * @param accumulator\n   * @returns {*}\n   */\n\n  function reduce(collection, fn, accumulator) {\n    if (isArray(collection)) return collection.reduce(fn, accumulator); // array-like objects\n\n    each(collection, function (v, k) {\n      return accumulator = fn(accumulator, v, k, collection);\n    });\n    return accumulator;\n  }\n  /**\n   * Returns the intersection between two arrays\n   *\n   * @param  {Array} xs The first array\n   * @param  {Array} ys The second array\n   * @return {Array}    Result array\n   */\n\n  function intersection(xs, ys) {\n    var hashes = ys.map(hashCode);\n    return xs.filter(function (v) {\n      return inArray(hashes, hashCode(v));\n    });\n  }\n  /**\n   * Returns the union of two arrays\n   *\n   * @param  {Array} xs The first array\n   * @param  {Array} ys The second array\n   * @return {Array}   The result array\n   */\n\n  function union(xs, ys) {\n    return into(into([], xs), ys.filter(notInArray.bind(null, xs)));\n  }\n  /**\n   * Flatten the array\n   *\n   * @param  {Array} xs The array to flatten\n   * @param {Number} depth The number of nested lists to iterate\n   */\n\n  function flatten(xs) {\n    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    var arr = [];\n\n    function flatten2(ys, iter) {\n      for (var i = 0, len = ys.length; i < len; i++) {\n        if (isArray(ys[i]) && (iter > 0 || iter < 0)) {\n          flatten2(ys[i], Math.max(-1, iter - 1));\n        } else {\n          arr.push(ys[i]);\n        }\n      }\n    }\n\n    flatten2(xs, depth);\n    return arr;\n  }\n  /**\n   * Unwrap a single element array to specified depth\n   * @param {Array} arr\n   * @param {Number} depth\n   */\n\n  function unwrap(arr, depth) {\n    if (depth < 1) return arr;\n\n    while (depth-- && isArray(arr) && arr.length === 1) {\n      arr = arr[0];\n    }\n\n    return arr;\n  }\n  /**\n   * Determine whether two values are the same or strictly equivalent\n   *\n   * @param  {*}  a The first value\n   * @param  {*}  b The second value\n   * @return {Boolean}   Result of comparison\n   */\n\n  function isEqual(a, b) {\n    var lhs = [a];\n    var rhs = [b];\n\n    while (lhs.length > 0) {\n      a = lhs.pop();\n      b = rhs.pop(); // strictly equal must be equal.\n\n      if (a === b) continue; // unequal types and functions cannot be equal.\n\n      var type = jsType(a);\n      if (type !== jsType(b) || type === T_FUNCTION) return false; // leverage toString for Date and RegExp types\n\n      switch (type) {\n        case T_ARRAY:\n          if (a.length !== b.length) return false; //if (a.length === b.length && a.length === 0) continue\n\n          into(lhs, a);\n          into(rhs, b);\n          break;\n\n        case T_OBJECT:\n          // deep compare objects\n          var ka = keys(a);\n          var kb = keys(b); // check length of keys early\n\n          if (ka.length !== kb.length) return false; // we know keys are strings so we sort before comparing\n\n          ka.sort();\n          kb.sort(); // compare keys\n\n          for (var i = 0, len = ka.length; i < len; i++) {\n            var temp = ka[i];\n\n            if (temp !== kb[i]) {\n              return false;\n            } else {\n              // save later work\n              lhs.push(a[temp]);\n              rhs.push(b[temp]);\n            }\n          }\n\n          break;\n\n        default:\n          // compare encoded values\n          if (encode(a) !== encode(b)) return false;\n      }\n    }\n\n    return lhs.length === 0;\n  }\n  /**\n   * Return a new unique version of the collection\n   * @param  {Array} xs The input collection\n   * @return {Array}    A new collection with unique values\n   */\n\n  function unique(xs) {\n    var h = {};\n    var arr = [];\n    each(xs, function (item) {\n      var k = hashCode(item);\n\n      if (!has(h, k)) {\n        arr.push(item);\n        h[k] = 0;\n      }\n    });\n    return arr;\n  }\n  /**\n   * Encode value to string using a simple non-colliding stable scheme.\n   *\n   * @param value\n   * @returns {*}\n   */\n\n  function encode(value) {\n    var type = jsType(value);\n\n    switch (type) {\n      case T_BOOLEAN:\n      case T_NUMBER:\n      case T_REGEXP:\n        return value.toString();\n\n      case T_STRING:\n        return JSON.stringify(value);\n\n      case T_DATE:\n        return value.toISOString();\n\n      case T_NULL:\n      case T_UNDEFINED:\n        return type;\n\n      case T_ARRAY:\n        return '[' + value.map(encode) + ']';\n\n      default:\n        var prefix = type === T_OBJECT ? '' : \"\".concat(getType(value));\n        var objKeys = keys(value);\n        objKeys.sort();\n        return \"\".concat(prefix, \"{\") + objKeys.map(function (k) {\n          return \"\".concat(encode(k), \":\").concat(encode(value[k]));\n        }) + '}';\n    }\n  }\n  /**\n   * Generate hash code\n   * This selected function is the result of benchmarking various hash functions.\n   * This version performs well and can hash 10^6 documents in ~3s with on average 100 collisions.\n   *\n   * @param value\n   * @returns {*}\n   */\n\n  function hashCode(value) {\n    if (isNil(value)) return null;\n    var hash = 0;\n    var s = encode(value);\n    var i = s.length;\n\n    while (i) {\n      hash = (hash << 5) - hash ^ s.charCodeAt(--i);\n    }\n\n    return hash >>> 0;\n  }\n  /**\n   * Default compare function\n   * @param {*} a\n   * @param {*} b\n   */\n\n  function compare(a, b) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  }\n  /**\n   * Returns a (stably) sorted copy of list, ranked in ascending order by the results of running each value through iteratee\n   *\n   * This implementation treats null/undefined sort keys as less than every other type\n   *\n   * @param {Array}   collection\n   * @param {Function} fn The function used to resolve sort keys\n   * @param {Function} cmp The comparator function to use for comparing values\n   * @return {Array} Returns a new sorted array by the given iteratee\n   */\n\n  function sortBy(collection, fn, cmp) {\n    var sorted = [];\n    var result = [];\n    var hash = {};\n    cmp = cmp || compare;\n    if (isEmpty(collection)) return collection;\n\n    for (var i = 0; i < collection.length; i++) {\n      var obj = collection[i];\n      var key = fn(obj, i); // objects with nil keys will go in first\n\n      if (isNil(key)) {\n        result.push(obj);\n      } else {\n        if (hash[key]) {\n          hash[key].push(obj);\n        } else {\n          hash[key] = [obj];\n        }\n\n        sorted.push(key);\n      }\n    } // use native array sorting but enforce stableness\n\n\n    sorted.sort(cmp);\n\n    for (var _i = 0; _i < sorted.length; _i++) {\n      into(result, hash[sorted[_i]]);\n    }\n\n    return result;\n  }\n  /**\n   * Groups the collection into sets by the returned key\n   *\n   * @param collection\n   * @param fn {Function} to compute the group key of an item in the collection\n   * @returns {{keys: Array, groups: Array}}\n   */\n\n  function groupBy(collection, fn) {\n    var result = {\n      'keys': [],\n      'groups': []\n    };\n    var lookup = {};\n    each(collection, function (obj) {\n      var key = fn(obj);\n      var hash = hashCode(key);\n      var index = -1;\n\n      if (lookup[hash] === undefined) {\n        index = result.keys.length;\n        lookup[hash] = index;\n        result.keys.push(key);\n        result.groups.push([]);\n      }\n\n      index = lookup[hash];\n      result.groups[index].push(obj);\n    });\n    return result;\n  }\n  /**\n   * Push elements in given array into target array\n   *\n   * @param {*} target The array to push into\n   * @param {*} xs The array of elements to push\n   */\n\n  function into(target, xs) {\n    arrayPush.apply(target, xs);\n    return target;\n  }\n  /**\n   * Find the insert index for the given key in a sorted array.\n   *\n   * @param {*} array The sorted array to search\n   * @param {*} item The search key\n   */\n\n  function findInsertIndex(array, item) {\n    // uses binary search\n    var lo = 0;\n    var hi = array.length - 1;\n\n    while (lo <= hi) {\n      var mid = Math.round(lo + (hi - lo) / 2);\n\n      if (item < array[mid]) {\n        hi = mid - 1;\n      } else if (item > array[mid]) {\n        lo = mid + 1;\n      } else {\n        return mid;\n      }\n    }\n\n    return lo;\n  }\n  /**\n   * This is a generic memoization function\n   *\n   * This implementation uses a cache independent of the function being memoized\n   * to allow old values to be garbage collected when the memoized function goes out of scope.\n   *\n   * @param {*} fn The function object to memoize\n   */\n\n  function memoize(fn) {\n    var _this = this;\n\n    return function (memo) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var key = hashCode(args);\n\n        if (!has(memo, key)) {\n          memo[key] = fn.apply(_this, args);\n        }\n\n        return memo[key];\n      };\n    }({\n      /* storage */\n    });\n  } // mingo internal\n\n  /**\n   * Retrieve the value of a given key on an object\n   * @param obj\n   * @param field\n   * @returns {*}\n   * @private\n   */\n\n  function getValue(obj, field) {\n    return isObjectLike(obj) ? obj[field] : undefined;\n  }\n  /**\n   * Resolve the value of the field (dot separated) on the given object\n   * @param obj {Object} the object context\n   * @param selector {String} dot separated path to field\n   * @returns {*}\n   */\n\n  function resolve(obj, selector) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var depth = 0; // options\n\n    options.meta = options.meta || false;\n\n    function resolve2(o, path) {\n      var value = o;\n\n      for (var i = 0; i < path.length; i++) {\n        var field = path[i];\n        var isText = field.match(/^\\d+$/) === null;\n\n        if (isText && isArray(value)) {\n          // On the first iteration, we check if we received a stop flag.\n          // If so, we stop to prevent iterating over a nested array value\n          // on consecutive object keys in the selector.\n          if (i === 0 && depth > 0) break;\n          depth += 1;\n          path = path.slice(i);\n          value = reduce(value, function (acc, item) {\n            var v = resolve2(item, path);\n            if (v !== undefined) acc.push(v);\n            return acc;\n          }, []);\n          break;\n        } else {\n          value = getValue(value, field);\n        }\n\n        if (value === undefined) break;\n      }\n\n      return value;\n    }\n\n    obj = inArray(JS_SIMPLE_TYPES, jsType(obj)) ? obj : resolve2(obj, selector.split('.'));\n    return options.meta ? {\n      result: obj,\n      depth: depth\n    } : obj;\n  }\n  /**\n   * Returns the full object to the resolved value given by the selector.\n   * This function excludes empty values as they aren't practically useful.\n   *\n   * @param obj {Object} the object context\n   * @param selector {String} dot separated path to field\n   */\n\n  function resolveObj(obj, selector) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // options\n    options.preserveMissingValues = options.preserveMissingValues || false;\n    var names = selector.split('.');\n    var key = names[0]; // get the next part of the selector\n\n    var next = names.length === 1 || names.slice(1).join('.');\n    var isIndex = key.match(/^\\d+$/) !== null;\n    var hasNext = names.length > 1;\n    var result;\n    var value;\n\n    try {\n      if (isArray(obj)) {\n        if (isIndex) {\n          result = getValue(obj, Number(key));\n\n          if (hasNext) {\n            result = resolveObj(result, next, options);\n          }\n\n          result = [result];\n        } else {\n          result = [];\n          each(obj, function (item) {\n            value = resolveObj(item, selector, options);\n\n            if (options.preserveMissingValues) {\n              if (value === undefined) {\n                value = MISSING;\n              }\n\n              result.push(value);\n            } else if (value !== undefined) {\n              result.push(value);\n            }\n          });\n        }\n      } else {\n        value = getValue(obj, key);\n\n        if (hasNext) {\n          value = resolveObj(value, next, options);\n        }\n\n        assert(value !== undefined);\n        result = {};\n        result[key] = value;\n      }\n    } catch (e) {\n      result = undefined;\n    }\n\n    return result;\n  }\n  /**\n   * Filter out all MISSING values from the object in-place\n   * @param {*} obj The object the filter\n   */\n\n  function filterMissing(obj) {\n    if (isArray(obj)) {\n      for (var i = obj.length - 1; i >= 0; i--) {\n        if (obj[i] === MISSING) {\n          obj.splice(i, 1);\n        } else {\n          filterMissing(obj[i]);\n        }\n      }\n    } else if (isObject(obj)) {\n      for (var k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          filterMissing(obj[k]);\n        }\n      }\n    }\n\n    return obj;\n  }\n  /**\n   * Walk the object graph and execute the given transform function\n   * @param  {Object|Array} obj   The object to traverse\n   * @param  {String} selector    The selector\n   * @param  {Function} fn Function to execute for value at the end the traversal\n   * @param  {Boolean} force Force generating missing parts of object graph\n   * @return {*}\n   */\n\n  function traverse(obj, selector, fn) {\n    var force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var names = selector.split('.');\n    var key = names[0];\n    var next = names.length === 1 || names.slice(1).join('.');\n\n    if (names.length === 1) {\n      fn(obj, key);\n    } else {\n      // force the rest of the graph while traversing\n      if (force === true && isNil(obj[key])) {\n        obj[key] = {};\n      }\n\n      traverse(obj[key], next, fn, force);\n    }\n  }\n  /**\n   * Set the value of the given object field\n   *\n   * @param obj {Object|Array} the object context\n   * @param selector {String} path to field\n   * @param value {*} the value to set\n   */\n\n  function setValue(obj, selector, value) {\n    traverse(obj, selector, function (item, key) {\n      item[key] = value;\n    }, true);\n  }\n  function removeValue(obj, selector) {\n    traverse(obj, selector, function (item, key) {\n      if (isArray(item) && /^\\d+$/.test(key)) {\n        item.splice(parseInt(key), 1);\n      } else if (isObject(item)) {\n        delete item[key];\n      }\n    });\n  }\n  /**\n   * Check whether the given name is an operator. We assume any field name starting with '$' is an operator.\n   * This is cheap and safe to do since keys beginning with '$' should be reserved for internal use.\n   * @param {String} name\n   */\n\n  function isOperator(name) {\n    return !!name && name[0] === '$';\n  }\n  /**\n   * Simplify expression for easy evaluation with query operators map\n   * @param expr\n   * @returns {*}\n   */\n\n  function normalize(expr) {\n    // normalized primitives\n    if (inArray(JS_SIMPLE_TYPES, jsType(expr))) {\n      return isRegExp(expr) ? {\n        '$regex': expr\n      } : {\n        '$eq': expr\n      };\n    } // normalize object expression\n\n\n    if (isObjectLike(expr)) {\n      var exprKeys = keys(expr); // no valid query operator found, so we do simple comparison\n\n      if (!exprKeys.some(isOperator)) {\n        return {\n          '$eq': expr\n        };\n      } // ensure valid regex\n\n\n      if (inArray(exprKeys, '$regex')) {\n        var regex = expr['$regex'];\n        var options = expr['$options'] || '';\n        var modifiers = '';\n\n        if (isString(regex)) {\n          modifiers += regex.ignoreCase || options.indexOf('i') >= 0 ? 'i' : '';\n          modifiers += regex.multiline || options.indexOf('m') >= 0 ? 'm' : '';\n          modifiers += regex.global || options.indexOf('g') >= 0 ? 'g' : '';\n          regex = new RegExp(regex, modifiers);\n        }\n\n        expr['$regex'] = regex;\n        delete expr['$options'];\n      }\n    }\n\n    return expr;\n  }\n  /**\n   * Returns a slice of the array\n   *\n   * @param  {Array} xs\n   * @param  {Number} skip\n   * @param  {Number} limit\n   * @return {Array}\n   */\n\n  function slice(xs, skip) {\n    var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    // MongoDB $slice works a bit differently from Array.slice\n    // Uses single argument for 'limit' and array argument [skip, limit]\n    if (isNil(limit)) {\n      if (skip < 0) {\n        skip = Math.max(0, xs.length + skip);\n        limit = xs.length - skip + 1;\n      } else {\n        limit = skip;\n        skip = 0;\n      }\n    } else {\n      if (skip < 0) {\n        skip = Math.max(0, xs.length + skip);\n      }\n\n      assert(limit > 0, 'Invalid argument value for $slice operator. Limit must be a positive number');\n      limit += skip;\n    }\n\n    return xs.slice(skip, limit);\n  }\n  /**\n   * Compute the standard deviation of the data set\n   * @param {Array} array of numbers\n   * @param {Boolean} if true calculates a sample standard deviation, otherwise calculates a population stddev\n   * @return {Number}\n   */\n\n  function stddev(data, sampled) {\n    var sum = reduce(data, function (acc, n) {\n      return acc + n;\n    }, 0);\n    var N = data.length || 1;\n    var correction = sampled && 1 || 0;\n    var avg = sum / N;\n    return Math.sqrt(reduce(data, function (acc, n) {\n      return acc + Math.pow(n - avg, 2);\n    }, 0) / (N - correction));\n  }\n  /**\n   * Exported to the users to allow writing custom operators\n   */\n\n  function moduleApi() {\n    return {\n      assert: assert,\n      clone: clone,\n      cloneDeep: cloneDeep,\n      each: each,\n      err: err,\n      hashCode: hashCode,\n      getType: getType,\n      has: has,\n      includes: inArray.bind(null),\n      isArray: isArray,\n      isBoolean: isBoolean,\n      isDate: isDate,\n      isEmpty: isEmpty,\n      isEqual: isEqual,\n      isFunction: isFunction,\n      isNil: isNil,\n      isNull: isNull,\n      isNumber: isNumber,\n      isObject: isObject,\n      isRegExp: isRegExp,\n      isString: isString,\n      isUndefined: isUndefined,\n      keys: keys,\n      reduce: reduce,\n      resolve: resolve,\n      resolveObj: resolveObj\n    };\n  }\n\n  var _internal = function _internal() {\n    return Object.assign({\n      computeValue: computeValue,\n      ops: ops\n    }, moduleApi());\n  }; // Settings used by Mingo internally\n\n  var settings = {\n    key: '_id'\n  };\n  /**\n   * Setup default settings for Mingo\n   * @param options\n   */\n\n  function setup(options) {\n    Object.assign(settings, options || {});\n  }\n  /**\n   * Implementation of system variables\n   * @type {Object}\n   */\n\n  var systemVariables = {\n    '$$ROOT': function $$ROOT(obj, expr, opt) {\n      return opt.root;\n    },\n    '$$CURRENT': function $$CURRENT(obj, expr, opt) {\n      return obj;\n    },\n    '$$REMOVE': function $$REMOVE(obj, expr, opt) {\n      return undefined;\n    }\n  };\n  /**\n   * Implementation of $redact variables\n   *\n   * Each function accepts 3 arguments (obj, expr, opt)\n   *\n   * @type {Object}\n   */\n\n  var redactVariables = {\n    '$$KEEP': function $$KEEP(obj) {\n      return obj;\n    },\n    '$$PRUNE': function $$PRUNE() {\n      return undefined;\n    },\n    '$$DESCEND': function $$DESCEND(obj, expr, opt) {\n      // traverse nested documents iff there is a $cond\n      if (!has(expr, '$cond')) return obj;\n      var result;\n      each(obj, function (current, key) {\n        if (isObjectLike(current)) {\n          if (isArray(current)) {\n            result = [];\n            each(current, function (elem) {\n              if (isObject(elem)) {\n                elem = redactObj(elem, expr, opt);\n              }\n\n              if (!isNil(elem)) result.push(elem);\n            });\n          } else {\n            result = redactObj(current, expr, opt);\n          }\n\n          if (isNil(result)) {\n            delete obj[key]; // pruned result\n          } else {\n            obj[key] = result;\n          }\n        }\n      });\n      return obj;\n    }\n  }; // system variables\n\n  var SYS_VARS = keys(systemVariables);\n  var REDACT_VARS = keys(redactVariables);\n  /**\n   * Returns the key used as the collection's objects ids\n   */\n\n  function idKey() {\n    return settings.key;\n  }\n  /**\n   * Returns the operators defined for the given operator classes\n   */\n\n  function ops() {\n    // Workaround for browser-compatibility bug: on iPhone 6S Safari (and\n    // probably some other platforms), `arguments` isn't detected as an array,\n    // but has a length field, so functions like `reduce` end up including the\n    // length field in their iteration. Copy to a real array.\n    var args = Array.prototype.slice.call(arguments);\n    return reduce(args, function (acc, cls) {\n      return into(acc, keys(OPERATORS[cls]));\n    }, []);\n  }\n  /**\n   * Returns the result of evaluating a $group operation over a collection\n   *\n   * @param collection\n   * @param field the name of the aggregate operator or field\n   * @param expr the expression of the aggregate operator for the field\n   * @returns {*}\n   */\n\n  function accumulate(collection, field, expr) {\n    if (has(OPERATORS[OP_GROUP], field)) {\n      return OPERATORS[OP_GROUP][field](collection, expr);\n    }\n\n    if (isObject(expr)) {\n      var result = {};\n      each(expr, function (val, key) {\n        result[key] = accumulate(collection, key, expr[key]); // must run ONLY one group operator per expression\n        // if so, return result of the computed value\n\n        if (has(OPERATORS[OP_GROUP], key)) {\n          result = result[key]; // if there are more keys in expression this is bad\n\n          assert(keys(expr).length === 1, \"Invalid $group expression '\" + JSON.stringify(expr) + \"'\");\n          return false; // break\n        }\n      });\n      return result;\n    }\n  }\n  /**\n   * Computes the actual value of the expression using the given object as context\n   *\n   * @param obj the current object from the collection\n   * @param expr the expression for the given field\n   * @param operator the operator to resolve the field with\n   * @param opt {Object} extra options\n   * @returns {*}\n   */\n\n  function computeValue(obj, expr) {\n    var operator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    opt.root = opt.root || obj; // if the field of the object is a valid operator\n\n    if (has(OPERATORS[OP_EXPRESSION], operator)) {\n      return OPERATORS[OP_EXPRESSION][operator](obj, expr, opt);\n    } // we also handle $group accumulator operators\n\n\n    if (has(OPERATORS[OP_GROUP], operator)) {\n      // we first fully resolve the expression\n      obj = computeValue(obj, expr, null, opt);\n      assert(isArray(obj), operator + ' expression must resolve to an array'); // we pass a null expression because all values have been resolved\n\n      return OPERATORS[OP_GROUP][operator](obj, null, opt);\n    } // if expr is a variable for an object field\n    // field not used in this case\n\n\n    if (isString(expr) && expr.length > 0 && expr[0] === '$') {\n      // we return system variables as literals\n      if (inArray(SYS_VARS, expr)) {\n        return systemVariables[expr](obj, null, opt);\n      } else if (inArray(REDACT_VARS, expr)) {\n        return expr;\n      } // handle selectors with explicit prefix\n\n\n      var sysVar = SYS_VARS.filter(function (v) {\n        return expr.indexOf(v + '.') === 0;\n      });\n\n      if (sysVar.length === 1) {\n        sysVar = sysVar[0];\n\n        if (sysVar === '$$ROOT') {\n          obj = opt.root;\n        }\n\n        expr = expr.substr(sysVar.length); // '.' prefix will be sliced off below\n      }\n\n      return resolve(obj, expr.slice(1));\n    } // check and return value if already in a resolved state\n\n\n    switch (jsType(expr)) {\n      case T_ARRAY:\n        return expr.map(function (item) {\n          return computeValue(obj, item);\n        });\n\n      case T_OBJECT:\n        var result = {};\n        each(expr, function (val, key) {\n          result[key] = computeValue(obj, val, key, opt); // must run ONLY one aggregate operator per expression\n          // if so, return result of the computed value\n\n          if ([OP_EXPRESSION, OP_GROUP].some(function (c) {\n            return has(OPERATORS[c], key);\n          })) {\n            // there should be only one operator\n            assert(keys(expr).length === 1, \"Invalid aggregation expression '\" + JSON.stringify(expr) + \"'\");\n            result = result[key];\n            return false; // break\n          }\n        });\n        return result;\n\n      default:\n        return expr;\n    }\n  }\n  /**\n   * Redact an object\n   * @param  {Object} obj The object to redact\n   * @param  {*} expr The redact expression\n   * @param  {*} opt  Options for value\n   * @return {*} Returns the redacted value\n   */\n\n  function redactObj(obj, expr) {\n    var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    opt.root = opt.root || obj;\n    var result = computeValue(obj, expr, null, opt);\n    return inArray(REDACT_VARS, result) ? redactVariables[result](obj, expr, opt) : result;\n  }\n\n  /**\n   * Returns the absolute value of a number.\n   * https://docs.mongodb.com/manual/reference/operator/aggregation/abs/#exp._S_abs\n   *\n   * @param obj\n   * @param expr\n   * @return {Number|null|NaN}\n   */\n\n  function $abs(obj, expr) {\n    var val = computeValue(obj, expr);\n    return val === null || val === undefined ? null : Math.abs(val);\n  }\n  /**\n   * Computes the sum of an array of numbers.\n   *\n   * @param obj\n   * @param expr\n   * @returns {Object}\n   */\n\n  function $add(obj, expr) {\n    var args = computeValue(obj, expr);\n    var foundDate = false;\n    var result = reduce(args, function (acc, val) {\n      if (isDate(val)) {\n        assert(!foundDate, \"'$add' can only have one date value\");\n        foundDate = true;\n        val = val.getTime();\n      } // assume val is a number\n\n\n      acc += val;\n      return acc;\n    }, 0);\n    return foundDate ? new Date(result) : result;\n  }\n  /**\n   * Returns the smallest integer greater than or equal to the specified number.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $ceil(obj, expr) {\n    var arg = computeValue(obj, expr);\n    if (isNil(arg)) return null;\n    assert(isNumber(arg) || isNaN(arg), '$ceil expression must resolve to a number.');\n    return Math.ceil(arg);\n  }\n  /**\n   * Takes two numbers and divides the first number by the second.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $divide(obj, expr) {\n    var args = computeValue(obj, expr);\n    return args[0] / args[1];\n  }\n  /**\n   * Raises Euler’s number (i.e. e ) to the specified exponent and returns the result.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $exp(obj, expr) {\n    var arg = computeValue(obj, expr);\n    if (isNil(arg)) return null;\n    assert(isNumber(arg) || isNaN(arg), '$exp expression must resolve to a number.');\n    return Math.exp(arg);\n  }\n  /**\n   * Returns the largest integer less than or equal to the specified number.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $floor(obj, expr) {\n    var arg = computeValue(obj, expr);\n    if (isNil(arg)) return null;\n    assert(isNumber(arg) || isNaN(arg), '$floor expression must resolve to a number.');\n    return Math.floor(arg);\n  }\n  /**\n   * Calculates the natural logarithm ln (i.e loge) of a number and returns the result as a double.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $ln(obj, expr) {\n    var arg = computeValue(obj, expr);\n    if (isNil(arg)) return null;\n    assert(isNumber(arg) || isNaN(arg), '$ln expression must resolve to a number.');\n    return Math.log(arg);\n  }\n  /**\n   * Calculates the log of a number in the specified base and returns the result as a double.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $log(obj, expr) {\n    var args = computeValue(obj, expr);\n    var msg = '$log expression must resolve to array(2) of numbers';\n    assert(isArray(args) && args.length === 2, msg);\n    if (args.some(isNil)) return null;\n    assert(args.some(isNaN) || args.every(isNumber), msg);\n    return Math.log10(args[0]) / Math.log10(args[1]);\n  }\n  /**\n   * Calculates the log base 10 of a number and returns the result as a double.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $log10(obj, expr) {\n    var arg = computeValue(obj, expr);\n    if (isNil(arg)) return null;\n    assert(isNumber(arg) || isNaN(arg), '$log10 expression must resolve to a number.');\n    return Math.log10(arg);\n  }\n  /**\n   * Takes two numbers and calculates the modulo of the first number divided by the second.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $mod(obj, expr) {\n    var args = computeValue(obj, expr);\n    return args[0] % args[1];\n  }\n  /**\n   * Computes the product of an array of numbers.\n   *\n   * @param obj\n   * @param expr\n   * @returns {Object}\n   */\n\n  function $multiply(obj, expr) {\n    var args = computeValue(obj, expr);\n    return reduce(args, function (acc, num) {\n      return acc * num;\n    }, 1);\n  }\n  /**\n   * Raises a number to the specified exponent and returns the result.\n   *\n   * @param obj\n   * @param expr\n   * @returns {Object}\n   */\n\n  function $pow(obj, expr) {\n    var args = computeValue(obj, expr);\n    assert(isArray(args) && args.length === 2 && args.every(isNumber), '$pow expression must resolve to array(2) of numbers');\n    assert(!(args[0] === 0 && args[1] < 0), '$pow cannot raise 0 to a negative exponent');\n    return Math.pow(args[0], args[1]);\n  }\n  /**\n   * Rounds a number to to a whole integer or to a specified decimal place.\n   * @param {*} obj\n   * @param {*} expr\n   */\n\n  function $round(obj, expr) {\n    var args = computeValue(obj, expr);\n    var num = args[0];\n    var place = args[1];\n    if (isNil(num) || isNaN(num) || Math.abs(num) === Infinity) return num;\n    assert(isNumber(num), '$round expression must resolve to a number.');\n    return truncate(num, place, true);\n  }\n  /**\n   * Calculates the square root of a positive number and returns the result as a double.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $sqrt(obj, expr) {\n    var n = computeValue(obj, expr);\n    if (isNil(n)) return null;\n    assert(isNumber(n) && n > 0 || isNaN(n), '$sqrt expression must resolve to non-negative number.');\n    return Math.sqrt(n);\n  }\n  /**\n   * Takes an array that contains two numbers or two dates and subtracts the second value from the first.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $subtract(obj, expr) {\n    var args = computeValue(obj, expr);\n    return args[0] - args[1];\n  }\n  /**\n   * Truncates a number to a whole integer or to a specified decimal place.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $trunc(obj, expr) {\n    var arr = computeValue(obj, expr);\n    var num = arr[0];\n    var places = arr[1];\n    if (isNil(num) || isNaN(num) || Math.abs(num) === Infinity) return num;\n    assert(isNumber(num), '$trunc expression must resolve to a number.');\n    assert(isNil(places) || isNumber(places) && places > -20 && places < 100, \"$trunc expression has invalid place\");\n    return truncate(num, places, false);\n  }\n  /**\n   * Truncates integer value to number of places. If roundOff is specified round value instead to the number of places\n   * @param {Number} num\n   * @param {Number} places\n   * @param {Boolean} roundOff\n   */\n\n  function truncate(num, places, roundOff) {\n    places = places || 0;\n    var sign = Math.abs(num) === num ? 1 : -1;\n    num = Math.abs(num);\n    var result = Math.trunc(num);\n    var decimals = num - result;\n\n    if (places === 0) {\n      var firstDigit = Math.trunc(10 * decimals);\n\n      if (roundOff && (result & 1) === 1 && firstDigit >= 5) {\n        result++;\n      }\n    } else if (places > 0) {\n      var offset = Math.pow(10, places);\n      var remainder = Math.trunc(decimals * offset); // last digit before cut off\n\n      var lastDigit = Math.trunc(decimals * offset * 10) % 10; // add one if last digit is greater than 5\n\n      if (roundOff && lastDigit > 5) {\n        remainder += 1;\n      } // compute decimal remainder and add to whole number\n\n\n      result += remainder / offset;\n    } else if (places < 0) {\n      // handle negative decimal places\n      var _offset = Math.pow(10, -1 * places);\n\n      var excess = result % _offset;\n      result = Math.max(0, result - excess); // for negative values the absolute must increase so we round up the last digit if >= 5\n\n      if (roundOff && sign === -1) {\n        while (excess > 10) {\n          excess -= excess % 10;\n        }\n\n        if (result > 0 && excess >= 5) {\n          result += _offset;\n        }\n      }\n    }\n\n    return result * sign;\n  }\n\n  /**\n   * Returns the element at the specified array index.\n   *\n   * @param  {Object} obj\n   * @param  {*} expr\n   * @return {*}\n   */\n\n  function $arrayElemAt(obj, expr) {\n    var arr = computeValue(obj, expr);\n    assert(isArray(arr) && arr.length === 2, '$arrayElemAt expression must resolve to array(2)');\n    assert(isArray(arr[0]), 'First operand to $arrayElemAt must resolve to an array');\n    assert(isNumber(arr[1]), 'Second operand to $arrayElemAt must resolve to an integer');\n    var idx = arr[1];\n    arr = arr[0];\n\n    if (idx < 0 && Math.abs(idx) <= arr.length) {\n      return arr[idx + arr.length];\n    } else if (idx >= 0 && idx < arr.length) {\n      return arr[idx];\n    }\n\n    return undefined;\n  }\n  /**\n   * Converts an array of key value pairs to a document.\n   */\n\n  function $arrayToObject(obj, expr) {\n    var arr = computeValue(obj, expr);\n    assert(isArray(arr), '$arrayToObject expression must resolve to an array');\n    return reduce(arr, function (newObj, val) {\n      if (isArray(val) && val.length == 2) {\n        newObj[val[0]] = val[1];\n      } else {\n        assert(isObject(val) && has(val, 'k') && has(val, 'v'), '$arrayToObject expression is invalid.');\n        newObj[val.k] = val.v;\n      }\n\n      return newObj;\n    }, {});\n  }\n  /**\n   * Concatenates arrays to return the concatenated array.\n   *\n   * @param  {Object} obj\n   * @param  {*} expr\n   * @return {*}\n   */\n\n  function $concatArrays(obj, expr) {\n    var arr = computeValue(obj, expr, null);\n    assert(isArray(arr), '$concatArrays must resolve to an array');\n    if (arr.some(isNil)) return null;\n    return arr.reduce(function (acc, item) {\n      return into(acc, item);\n    }, []);\n  }\n  /**\n   * Selects a subset of the array to return an array with only the elements that match the filter condition.\n   *\n   * @param  {Object} obj  [description]\n   * @param  {*} expr [description]\n   * @return {*}      [description]\n   */\n\n  function $filter(obj, expr) {\n    var input = computeValue(obj, expr.input);\n    var asVar = expr['as'];\n    var condExpr = expr['cond'];\n    assert(isArray(input), \"$filter 'input' expression must resolve to an array\");\n    return input.filter(function (o) {\n      // inject variable\n      var tempObj = {};\n      tempObj['$' + asVar] = o;\n      return computeValue(tempObj, condExpr) === true;\n    });\n  }\n  /**\n   * Returns a boolean indicating whether a specified value is in an array.\n   *\n   * @param {Object} obj\n   * @param {Array} expr\n   */\n\n  function $in(obj, expr) {\n    var val = computeValue(obj, expr[0]);\n    var arr = computeValue(obj, expr[1]);\n    assert(isArray(arr), '$in second argument must be an array');\n    return arr.some(isEqual.bind(null, val));\n  }\n  /**\n   * Searches an array for an occurrence of a specified value and returns the array index of the first occurrence.\n   * If the substring is not found, returns -1.\n   *\n   * @param  {Object} obj\n   * @param  {*} expr\n   * @return {*}\n   */\n\n  function $indexOfArray(obj, expr) {\n    var args = computeValue(obj, expr);\n    if (isNil(args)) return null;\n    var arr = args[0];\n    var searchValue = args[1];\n    if (isNil(arr)) return null;\n    assert(isArray(arr), '$indexOfArray expression must resolve to an array.');\n    var start = args[2] || 0;\n    var end = args[3];\n    if (isNil(end)) end = arr.length;\n    if (start > end) return -1;\n    assert(start >= 0 && end >= 0, '$indexOfArray expression is invalid');\n\n    if (start > 0 || end < arr.length) {\n      arr = arr.slice(start, end);\n    }\n\n    return arr.findIndex(isEqual.bind(null, searchValue)) + start;\n  }\n  /**\n   * Determines if the operand is an array. Returns a boolean.\n   *\n   * @param  {Object}  obj\n   * @param  {*}  expr\n   * @return {Boolean}\n   */\n\n  function $isArray(obj, expr) {\n    return isArray(computeValue(obj, expr[0]));\n  }\n  /**\n   * Applies a sub-expression to each element of an array and returns the array of resulting values in order.\n   *\n   * @param obj\n   * @param expr\n   * @returns {Array|*}\n   */\n\n  function $map(obj, expr) {\n    var inputExpr = computeValue(obj, expr.input);\n    assert(isArray(inputExpr), \"$map 'input' expression must resolve to an array\");\n    var asExpr = expr['as'];\n    var inExpr = expr['in']; // HACK: add the \"as\" expression as a value on the object to take advantage of \"resolve()\"\n    // which will reduce to that value when invoked. The reference to the as expression will be prefixed with \"$$\".\n    // But since a \"$\" is stripped of before passing the name to \"resolve()\" we just need to prepend \"$\" to the key.\n\n    var tempKey = '$' + asExpr;\n    return inputExpr.map(function (item) {\n      obj[tempKey] = item;\n      return computeValue(obj, inExpr);\n    });\n  }\n  /**\n   * Converts a document to an array of documents representing key-value pairs.\n   */\n\n  function $objectToArray(obj, expr) {\n    var val = computeValue(obj, expr);\n    assert(isObject(val), '$objectToArray expression must resolve to an object');\n    var arr = [];\n    each(val, function (v, k) {\n      return arr.push({\n        k: k,\n        v: v\n      });\n    });\n    return arr;\n  }\n  /**\n   * Returns an array whose elements are a generated sequence of numbers.\n   *\n   * @param  {Object} obj\n   * @param  {*} expr\n   * @return {*}\n   */\n\n  function $range(obj, expr) {\n    var arr = computeValue(obj, expr);\n    var start = arr[0];\n    var end = arr[1];\n    var step = arr[2] || 1;\n    var result = [];\n\n    while (start < end && step > 0 || start > end && step < 0) {\n      result.push(start);\n      start += step;\n    }\n\n    return result;\n  }\n  /**\n   * Applies an expression to each element in an array and combines them into a single value.\n   *\n   * @param {Object} obj\n   * @param {*} expr\n   */\n\n  function $reduce(obj, expr) {\n    var input = computeValue(obj, expr.input);\n    var initialValue = computeValue(obj, expr.initialValue);\n    var inExpr = expr['in'];\n    if (isNil(input)) return null;\n    assert(isArray(input), \"$reduce 'input' expression must resolve to an array\");\n    return reduce(input, function (acc, n) {\n      return computeValue({\n        '$value': acc,\n        '$this': n\n      }, inExpr);\n    }, initialValue);\n  }\n  /**\n   * Returns an array with the elements in reverse order.\n   *\n   * @param  {Object} obj\n   * @param  {*} expr\n   * @return {*}\n   */\n\n  function $reverseArray(obj, expr) {\n    var arr = computeValue(obj, expr);\n    if (isNil(arr)) return null;\n    assert(isArray(arr), '$reverseArray expression must resolve to an array');\n    var result = [];\n    into(result, arr);\n    result.reverse();\n    return result;\n  }\n  /**\n   * Counts and returns the total the number of items in an array.\n   *\n   * @param obj\n   * @param expr\n   */\n\n  function $size(obj, expr) {\n    var value = computeValue(obj, expr);\n    return isArray(value) ? value.length : undefined;\n  }\n  /**\n   * Returns a subset of an array.\n   *\n   * @param  {Object} obj\n   * @param  {*} expr\n   * @return {*}\n   */\n\n  function $slice(obj, expr) {\n    var arr = computeValue(obj, expr);\n    return slice(arr[0], arr[1], arr[2]);\n  }\n  /**\n   * Merge two lists together.\n   *\n   * Transposes an array of input arrays so that the first element of the output array would be an array containing,\n   * the first element of the first input array, the first element of the second input array, etc.\n   *\n   * @param  {Obj} obj\n   * @param  {*} expr\n   * @return {*}\n   */\n\n  function $zip(obj, expr) {\n    var inputs = computeValue(obj, expr.inputs);\n    var useLongestLength = expr.useLongestLength || false;\n    assert(isArray(inputs), \"'inputs' expression must resolve to an array\");\n    assert(isBoolean(useLongestLength), \"'useLongestLength' must be a boolean\");\n\n    if (isArray(expr.defaults)) {\n      assert(truthy(useLongestLength), \"'useLongestLength' must be set to true to use 'defaults'\");\n    }\n\n    var zipCount = 0;\n\n    for (var i = 0, len = inputs.length; i < len; i++) {\n      var arr = inputs[i];\n      if (isNil(arr)) return null;\n      assert(isArray(arr), \"'inputs' expression values must resolve to an array or null\");\n      zipCount = useLongestLength ? Math.max(zipCount, arr.length) : Math.min(zipCount || arr.length, arr.length);\n    }\n\n    var result = [];\n    var defaults = expr.defaults || [];\n\n    var _loop = function _loop(_i) {\n      var temp = inputs.map(function (val, index) {\n        return isNil(val[_i]) ? defaults[index] || null : val[_i];\n      });\n      result.push(temp);\n    };\n\n    for (var _i = 0; _i < zipCount; _i++) {\n      _loop(_i);\n    }\n\n    return result;\n  }\n  /**\n   * Combines multiple documents into a single document.\n   * @param {*} obj\n   * @param {*} expr\n   */\n\n  function $mergeObjects(obj, expr) {\n    var docs = computeValue(obj, expr);\n\n    if (isArray(docs)) {\n      return reduce(docs, function (memo, o) {\n        return Object.assign(memo, o);\n      }, {});\n    }\n\n    return {};\n  }\n\n  /**\n   * Returns true only when all its expressions evaluate to true. Accepts any number of argument expressions.\n   *\n   * @param obj\n   * @param expr\n   * @returns {boolean}\n   */\n\n  function $and(obj, expr) {\n    var value = computeValue(obj, expr);\n    return truthy(value) && value.every(truthy);\n  }\n  /**\n   * Returns true when any of its expressions evaluates to true. Accepts any number of argument expressions.\n   *\n   * @param obj\n   * @param expr\n   * @returns {boolean}\n   */\n\n  function $or(obj, expr) {\n    var value = computeValue(obj, expr);\n    return truthy(value) && value.some(truthy);\n  }\n  /**\n   * Returns the boolean value that is the opposite of its argument expression. Accepts a single argument expression.\n   *\n   * @param obj\n   * @param expr\n   * @returns {boolean}\n   */\n\n  function $not(obj, expr) {\n    return !computeValue(obj, expr[0]);\n  }\n\n  /**\n   * Returns an iterator\n   * @param {*} source An iterable source (Array, Function, Object{next:Function})\n   */\n  function Lazy(source) {\n    return source instanceof Iterator ? source : new Iterator(source);\n  }\n  Lazy.isIterator = isIterator;\n  /**\n   * Checks whether the given object is compatible with iterator i.e Object{next:Function}\n   * @param {*} o An object\n   */\n\n  function isIterator(o) {\n    return !!o && _typeof(o) === 'object' && isFn(o.next);\n  }\n\n  function isFn(f) {\n    return !!f && typeof f === 'function';\n  }\n\n  function dropItem(array, i) {\n    var rest = array.slice(i + 1);\n    array.splice(i);\n    Array.prototype.push.apply(array, rest);\n  } // stop iteration error\n\n\n  var DONE = new Error(); // Lazy function type flags\n\n  var LAZY_MAP = 1;\n  var LAZY_FILTER = 2;\n  var LAZY_TAKE = 3;\n  var LAZY_DROP = 4;\n\n  function baseIterator(nextFn, iteratees, buffer) {\n    var done = false;\n    var index = -1;\n\n    var bIndex = 0; // index for the buffer\n\n    return function (b) {\n      // special hack to collect all values into buffer\n      b = b === buffer;\n\n      try {\n        outer: while (!done) {\n          var o = nextFn();\n          index++;\n          var mIndex = -1;\n          var mSize = iteratees.length;\n          var innerDone = false;\n\n          while (++mIndex < mSize) {\n            var member = iteratees[mIndex],\n                func = member.func,\n                type = member.type;\n\n            switch (type) {\n              case LAZY_MAP:\n                o = func(o, index);\n                break;\n\n              case LAZY_FILTER:\n                if (!func(o, index)) continue outer;\n                break;\n\n              case LAZY_TAKE:\n                --member.func;\n                if (!member.func) innerDone = true;\n                break;\n\n              case LAZY_DROP:\n                --member.func;\n                if (!member.func) dropItem(iteratees, mIndex);\n                continue outer;\n\n              default:\n                break outer;\n            }\n          }\n\n          done = innerDone;\n\n          if (b) {\n            buffer[bIndex++] = o;\n          } else {\n            return {\n              value: o,\n              done: false\n            };\n          }\n        }\n      } catch (e) {\n        if (e !== DONE) throw e;\n      }\n\n      done = true;\n      return {\n        done: true\n      };\n    };\n  }\n\n  var Iterator = /*#__PURE__*/function () {\n    /**\n     * @param {*} source An iterable object or function.\n     *    Array - return one element per cycle\n     *    Object{next:Function} - call next() for the next value (this also handles generator functions)\n     *    Function - call to return the next value\n     * @param {Function} fn An optional transformation function\n     */\n    function Iterator(source) {\n      _classCallCheck(this, Iterator);\n\n      this.__iteratees = []; // lazy function chain\n\n      this.__first = false; // flag whether to return a single value\n\n      this.__done = false;\n      this.__buf = [];\n\n      if (isFn(source)) {\n        // make iterable\n        source = {\n          next: source\n        };\n      }\n\n      if (isIterator(source)) {\n        var src = source;\n\n        source = function source() {\n          var o = src.next();\n          if (o.done) throw DONE;\n          return o.value;\n        };\n      } else if (Array.isArray(source)) {\n        var data = source;\n        var size = data.length;\n        var index = 0;\n\n        source = function source() {\n          if (index < size) return data[index++];\n          throw DONE;\n        };\n      } else if (!isFn(source)) {\n        throw new Error(\"Source is not iterable. Must be Array, Function or Object{next:Function}\");\n      } // create next function\n\n\n      this.next = baseIterator(source, this.__iteratees, this.__buf);\n    }\n\n    _createClass(Iterator, [{\n      key: \"_validate\",\n      value: function _validate() {\n        if (this.__first) throw new Error(\"Cannot add iteratee/transform after `first()`\");\n      }\n      /**\n       * Add an iteratee to this lazy sequence\n       * @param {Object} iteratee\n       */\n\n    }, {\n      key: \"_push\",\n      value: function _push(iteratee) {\n        this._validate();\n\n        this.__iteratees.push(iteratee);\n\n        return this;\n      } // Iteratees methods\n\n      /**\n       * Transform each item in the sequence to a new value\n       * @param {Function} f\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(f) {\n        return this._push({\n          type: LAZY_MAP,\n          func: f\n        });\n      }\n      /**\n       * Select only items matching the given predicate\n       * @param {Function} pred\n       */\n\n    }, {\n      key: \"filter\",\n      value: function filter(pred) {\n        return this._push({\n          type: LAZY_FILTER,\n          func: pred\n        });\n      }\n      /**\n       * Take given numbe for values from sequence\n       * @param {Number} n A number greater than 0\n       */\n\n    }, {\n      key: \"take\",\n      value: function take(n) {\n        return n > 0 ? this._push({\n          type: LAZY_TAKE,\n          func: n\n        }) : this;\n      }\n      /**\n       * Drop a number of values from the sequence\n       * @param {Number} n Number of items to drop greater than 0\n       */\n\n    }, {\n      key: \"drop\",\n      value: function drop(n) {\n        return n > 0 ? this._push({\n          type: LAZY_DROP,\n          func: n\n        }) : this;\n      } // Transformations\n\n      /**\n       * Returns a new lazy object with results of the transformation\n       * The entire sequence is realized.\n       *\n       * @param {Function} fn Tranform function of type (Array) => (Any)\n       */\n\n    }, {\n      key: \"transform\",\n      value: function transform(fn) {\n        this._validate();\n\n        var self = this;\n        var iter;\n        return Lazy(function () {\n          if (!iter) {\n            iter = Lazy(fn(self.value()));\n          }\n\n          return iter.next();\n        });\n      }\n      /**\n       * Mark this lazy object to return only the first result on `lazy.value()`.\n       * No more iteratees or transformations can be added after this method is called.\n       */\n\n    }, {\n      key: \"first\",\n      value: function first() {\n        this.take(1);\n        this.__first = true;\n        return this;\n      } // Terminal methods\n\n      /**\n       * Returns the fully realized values of the iterators.\n       * The return value will be an array unless `lazy.first()` was used.\n       * The realized values are cached for subsequent calls\n       */\n\n    }, {\n      key: \"value\",\n      value: function value() {\n        if (!this.__done) {\n          this.__done = this.next(this.__buf).done;\n        }\n\n        return this.__first ? this.__buf[0] : this.__buf;\n      }\n      /**\n       * Execute the funcion for each value. Will stop when an execution returns false.\n       * @param {Function} f\n       * @returns {Boolean} false iff `f` return false for any execution, otherwise true\n       */\n\n    }, {\n      key: \"each\",\n      value: function each(f) {\n        while (1) {\n          var o = this.next();\n          if (o.done) break;\n          if (f(o.value) === false) return false;\n        }\n\n        return true;\n      }\n      /**\n       * Returns the reduction of sequence according the reducing function\n       *\n       * @param {*} f a reducing function\n       * @param {*} init\n       */\n\n    }, {\n      key: \"reduce\",\n      value: function reduce(f, init) {\n        var o = this.next();\n        var i = 0;\n\n        if (init === undefined && !o.done) {\n          init = o.value;\n          o = this.next();\n          i++;\n        }\n\n        while (!o.done) {\n          init = f(init, o.value, i++);\n          o = this.next();\n        }\n\n        return init;\n      }\n      /**\n       * Returns the number of matched items in the sequence\n       */\n\n    }, {\n      key: \"size\",\n      value: function size() {\n        return this.reduce(function (acc, n) {\n          return ++acc;\n        }, 0);\n      }\n    }]);\n\n    return Iterator;\n  }();\n\n  if (typeof Symbol === 'function') {\n    Iterator.prototype[Symbol.iterator] = function () {\n      return this;\n    };\n  }\n\n  /**\n   * Aggregator for defining filter using mongoDB aggregation pipeline syntax\n   *\n   * @param operators an Array of pipeline operators\n   * @constructor\n   */\n\n  var Aggregator = /*#__PURE__*/function () {\n    function Aggregator(operators, options) {\n      _classCallCheck(this, Aggregator);\n\n      this.__operators = operators;\n      this.__options = options;\n    }\n    /**\n     * Returns an `Lazy` iterator for processing results of pipeline\n     *\n     * @param {*} collection An array or iterator object\n     * @param {Query} query the `Query` object to use as context\n     * @returns {Iterator} an iterator object\n     */\n\n\n    _createClass(Aggregator, [{\n      key: \"stream\",\n      value: function stream(collection, query) {\n        var _this = this;\n\n        collection = Lazy(collection);\n        var pipelineOperators = OPERATORS[OP_PIPELINE];\n\n        if (!isEmpty(this.__operators)) {\n          // run aggregation pipeline\n          each(this.__operators, function (operator) {\n            var key = keys(operator);\n            assert(key.length === 1 && inArray(ops(OP_PIPELINE), key[0]), \"invalid aggregation operator \".concat(key));\n            key = key[0];\n\n            if (query && query instanceof Query) {\n              collection = pipelineOperators[key].call(query, collection, operator[key], _this.__options);\n            } else {\n              collection = pipelineOperators[key](collection, operator[key], _this.__options);\n            }\n          });\n        }\n\n        return collection;\n      }\n      /**\n       * Return the results of the aggregation as an array.\n       * @param {*} collection\n       * @param {*} query\n       */\n\n    }, {\n      key: \"run\",\n      value: function run(collection, query) {\n        return this.stream(collection, query).value();\n      }\n    }]);\n\n    return Aggregator;\n  }();\n  /**\n   * Return the result collection after running the aggregation pipeline for the given collection.\n   * Shorthand for `(new Aggregator(pipeline, options)).run(collection)`\n   *\n   * @param {Array} collection Collection or stream of objects\n   * @param {Array} pipeline The pipeline operators to use\n   * @returns {Array}\n   */\n\n  function aggregate(collection, pipeline, options) {\n    assert(isArray(pipeline), 'Aggregation pipeline must be an array');\n    return new Aggregator(pipeline, options).run(collection);\n  }\n\n  /**\n   * Cursor to iterate and perform filtering on matched objects\n   * @param collection\n   * @param query\n   * @param projection\n   * @constructor\n   */\n\n  var Cursor = /*#__PURE__*/function () {\n    function Cursor(source, query, projection) {\n      _classCallCheck(this, Cursor);\n\n      this.__filterFn = query.test.bind(query);\n      this.__query = query;\n      this.__source = source;\n      this.__projection = projection || query.__projection;\n      this.__operators = [];\n      this.__result = null;\n      this.__stack = [];\n      this.__options = {};\n    }\n\n    _createClass(Cursor, [{\n      key: \"_fetch\",\n      value: function _fetch() {\n        if (!!this.__result) return this.__result; // add projection operator\n\n        if (isObject(this.__projection)) this.__operators.push({\n          '$project': this.__projection\n        }); // filter collection\n\n        this.__result = Lazy(this.__source).filter(this.__filterFn);\n\n        if (this.__operators.length > 0) {\n          this.__result = new Aggregator(this.__operators, this.__options).stream(this.__result, this.__query);\n        }\n\n        return this.__result;\n      }\n      /**\n       * Return remaining objects in the cursor as an array. This method exhausts the cursor\n       * @returns {Array}\n       */\n\n    }, {\n      key: \"all\",\n      value: function all() {\n        return this._fetch().value();\n      }\n      /**\n       * Returns the number of objects return in the cursor. This method exhausts the cursor\n       * @returns {Number}\n       */\n\n    }, {\n      key: \"count\",\n      value: function count() {\n        return this.all().length;\n      }\n      /**\n       * Returns a cursor that begins returning results only after passing or skipping a number of documents.\n       * @param {Number} n the number of results to skip.\n       * @return {Cursor} Returns the cursor, so you can chain this call.\n       */\n\n    }, {\n      key: \"skip\",\n      value: function skip(n) {\n        this.__operators.push({\n          '$skip': n\n        });\n\n        return this;\n      }\n      /**\n       * Constrains the size of a cursor's result set.\n       * @param {Number} n the number of results to limit to.\n       * @return {Cursor} Returns the cursor, so you can chain this call.\n       */\n\n    }, {\n      key: \"limit\",\n      value: function limit(n) {\n        this.__operators.push({\n          '$limit': n\n        });\n\n        return this;\n      }\n      /**\n       * Returns results ordered according to a sort specification.\n       * @param {Object} modifier an object of key and values specifying the sort order. 1 for ascending and -1 for descending\n       * @return {Cursor} Returns the cursor, so you can chain this call.\n       */\n\n    }, {\n      key: \"sort\",\n      value: function sort(modifier) {\n        this.__operators.push({\n          '$sort': modifier\n        });\n\n        return this;\n      }\n      /**\n       * Specifies the collation for the cursor returned by the `mingo.Query.find`\n       * @param {*} options\n       */\n\n    }, {\n      key: \"collation\",\n      value: function collation(options) {\n        this.__options['collation'] = options;\n        return this;\n      }\n      /**\n       * Returns the next document in a cursor.\n       * @returns {Object | Boolean}\n       */\n\n    }, {\n      key: \"next\",\n      value: function next() {\n        if (!this.__stack) return; // done\n\n        if (this.__stack.length > 0) return this.__stack.pop(); // yield value obtains in hasNext()\n\n        var o = this._fetch().next();\n\n        if (!o.done) return o.value;\n        this.__stack = null;\n        return;\n      }\n      /**\n       * Returns true if the cursor has documents and can be iterated.\n       * @returns {boolean}\n       */\n\n    }, {\n      key: \"hasNext\",\n      value: function hasNext() {\n        if (!this.__stack) return false; // done\n\n        if (this.__stack.length > 0) return true; // there is a value on stack\n\n        var o = this._fetch().next();\n\n        if (!o.done) {\n          this.__stack.push(o.value);\n        } else {\n          this.__stack = null;\n        }\n\n        return !!this.__stack;\n      }\n      /**\n       * Applies a function to each document in a cursor and collects the return values in an array.\n       * @param callback\n       * @returns {Array}\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        return this._fetch().map(callback).value();\n      }\n      /**\n       * Applies a JavaScript function for every document in a cursor.\n       * @param callback\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        this._fetch().each(callback);\n      }\n    }]);\n\n    return Cursor;\n  }();\n\n  if (typeof Symbol === 'function') {\n    /**\n     * Applies an [ES2015 Iteration protocol][] compatible implementation\n     * [ES2015 Iteration protocol]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n     * @returns {Object}\n     */\n    Cursor.prototype[Symbol.iterator] = function () {\n      return this._fetch();\n    };\n  }\n\n  /**\n   * Query object to test collection elements with\n   * @param criteria the pass criteria for the query\n   * @param projection optional projection specifiers\n   * @constructor\n   */\n\n  var Query = /*#__PURE__*/function () {\n    function Query(criteria, projection) {\n      _classCallCheck(this, Query);\n\n      this.__criteria = criteria;\n      this.__projection = projection || {};\n      this.__compiled = [];\n\n      this._compile();\n    }\n\n    _createClass(Query, [{\n      key: \"_compile\",\n      value: function _compile() {\n        var _this = this;\n\n        assert(isObject(this.__criteria), 'query criteria must be an object');\n        var whereOperator;\n        each(this.__criteria, function (expr, field) {\n          // save $where operators to be executed after other operators\n          if ('$where' === field) {\n            whereOperator = {\n              field: field,\n              expr: expr\n            };\n          } else if ('$expr' === field) {\n            _this._processOperator(field, field, expr);\n          } else if (inArray(['$and', '$or', '$nor'], field)) {\n            _this._processOperator(field, field, expr);\n          } else {\n            // normalize expression\n            assert(!isOperator(field), \"unknown top level operator: \".concat(field));\n            expr = normalize(expr);\n            each(expr, function (val, op) {\n              _this._processOperator(field, op, val);\n            });\n          }\n\n          if (isObject(whereOperator)) {\n            _this._processOperator(whereOperator.field, whereOperator.field, whereOperator.expr);\n          }\n        });\n      }\n    }, {\n      key: \"_processOperator\",\n      value: function _processOperator(field, operator, value) {\n        assert(has(OPERATORS[OP_QUERY], operator), \"invalid query operator \".concat(operator, \" detected\"));\n\n        this.__compiled.push(OPERATORS[OP_QUERY][operator](field, value));\n      }\n      /**\n       * Checks if the object passes the query criteria. Returns true if so, false otherwise.\n       * @param obj\n       * @returns {boolean}\n       */\n\n    }, {\n      key: \"test\",\n      value: function test(obj) {\n        for (var i = 0, len = this.__compiled.length; i < len; i++) {\n          if (!this.__compiled[i](obj)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n      /**\n       * Performs a query on a collection and returns a cursor object.\n       * @param collection\n       * @param projection\n       * @returns {Cursor}\n       */\n\n    }, {\n      key: \"find\",\n      value: function find(collection, projection) {\n        return new Cursor(collection, this, projection);\n      }\n      /**\n       * Remove matched documents from the collection returning the remainder\n       * @param collection\n       * @returns {Array}\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove(collection) {\n        var _this2 = this;\n\n        return reduce(collection, function (acc, obj) {\n          if (!_this2.test(obj)) acc.push(obj);\n          return acc;\n        }, []);\n      }\n    }]);\n\n    return Query;\n  }();\n  /**\n   * Performs a query on a collection and returns a cursor object.\n   *\n   * @param collection\n   * @param criteria\n   * @param projection\n   * @returns {Cursor}\n   */\n\n  function find(collection, criteria, projection) {\n    return new Query(criteria).find(collection, projection);\n  }\n  /**\n   * Returns a new array without objects which match the criteria\n   *\n   * @param collection\n   * @param criteria\n   * @returns {Array}\n   */\n\n  function remove(collection, criteria) {\n    return new Query(criteria).remove(collection);\n  }\n\n  /**\n   * Query and Projection Operators. https://docs.mongodb.com/manual/reference/operator/query/\n   */\n  /**\n   * Checks that two values are equal.\n   *\n   * @param a         The lhs operand as resolved from the object by the given selector\n   * @param b         The rhs operand provided by the user\n   * @returns {*}\n   */\n\n  function $eq(a, b) {\n    // start with simple equality check\n    if (isEqual(a, b)) return true; // https://docs.mongodb.com/manual/tutorial/query-for-null-fields/\n\n    if (isNil(a) && isNil(b)) return true; // check\n\n    if (isArray(a)) {\n      var eq = isEqual.bind(null, b);\n      return a.some(eq) || flatten(a, 1).some(eq);\n    }\n\n    return false;\n  }\n  /**\n   * Matches all values that are not equal to the value specified in the query.\n   *\n   * @param a\n   * @param b\n   * @returns {boolean}\n   */\n\n  function $ne(a, b) {\n    return !$eq(a, b);\n  }\n  /**\n   * Matches any of the values that exist in an array specified in the query.\n   *\n   * @param a\n   * @param b\n   * @returns {*}\n   */\n\n  function $in$1(a, b) {\n    // queries for null should be able to find undefined fields\n    if (isNil(a)) return b.some(isNull);\n    return intersection(ensureArray(a), b).length > 0;\n  }\n  /**\n   * Matches values that do not exist in an array specified to the query.\n   *\n   * @param a\n   * @param b\n   * @returns {*|boolean}\n   */\n\n  function $nin(a, b) {\n    return !$in$1(a, b);\n  }\n  /**\n   * Matches values that are less than the value specified in the query.\n   *\n   * @param a\n   * @param b\n   * @returns {boolean}\n   */\n\n  function $lt(a, b) {\n    return compare$1(a, b, function (x, y) {\n      return x < y;\n    });\n  }\n  /**\n   * Matches values that are less than or equal to the value specified in the query.\n   *\n   * @param a\n   * @param b\n   * @returns {boolean}\n   */\n\n  function $lte(a, b) {\n    return compare$1(a, b, function (x, y) {\n      return x <= y;\n    });\n  }\n  /**\n   * Matches values that are greater than the value specified in the query.\n   *\n   * @param a\n   * @param b\n   * @returns {boolean}\n   */\n\n  function $gt(a, b) {\n    return compare$1(a, b, function (x, y) {\n      return x > y;\n    });\n  }\n  /**\n   * Matches values that are greater than or equal to the value specified in the query.\n   *\n   * @param a\n   * @param b\n   * @returns {boolean}\n   */\n\n  function $gte(a, b) {\n    return compare$1(a, b, function (x, y) {\n      return x >= y;\n    });\n  }\n  /**\n   * Performs a modulo operation on the value of a field and selects documents with a specified result.\n   *\n   * @param a\n   * @param b\n   * @returns {boolean}\n   */\n\n  function $mod$1(a, b) {\n    return ensureArray(a).some(function (x) {\n      return isNumber(x) && isArray(b) && b.length === 2 && x % b[0] === b[1];\n    });\n  }\n  /**\n   * Selects documents where values match a specified regular expression.\n   *\n   * @param a\n   * @param b\n   * @returns {boolean}\n   */\n\n  function $regex(a, b) {\n    a = ensureArray(a);\n\n    var match = function match(x) {\n      return isString(x) && !!x.match(b);\n    };\n\n    return a.some(match) || flatten(a, 1).some(match);\n  }\n  /**\n   * Matches documents that have the specified field.\n   *\n   * @param a\n   * @param b\n   * @returns {boolean}\n   */\n\n  function $exists(a, b) {\n    return (b === false || b === 0) && a === undefined || (b === true || b === 1) && a !== undefined;\n  }\n  /**\n   * Matches arrays that contain all elements specified in the query.\n   *\n   * @param a\n   * @param b\n   * @returns boolean\n   */\n\n  function $all(a, b) {\n    var matched = false;\n\n    if (isArray(a) && isArray(b)) {\n      for (var i = 0, len = b.length; i < len; i++) {\n        if (isObject(b[i]) && inArray(keys(b[i]), '$elemMatch')) {\n          matched = matched || $elemMatch(a, b[i].$elemMatch);\n        } else {\n          // order of arguments matter\n          return intersection(b, a).length === len;\n        }\n      }\n    }\n\n    return matched;\n  }\n  /**\n   * Selects documents if the array field is a specified size.\n   *\n   * @param a\n   * @param b\n   * @returns {*|boolean}\n   */\n\n  function $size$1(a, b) {\n    return isArray(a) && isNumber(b) && a.length === b;\n  }\n  /**\n   * Selects documents if element in the array field matches all the specified $elemMatch condition.\n   *\n   * @param a {Array} element to match against\n   * @param b {Object} subquery\n   */\n\n  function $elemMatch(a, b) {\n    if (isArray(a) && !isEmpty(a)) {\n      var format = function format(x) {\n        return x;\n      };\n\n      var criteria = b; // If we find an operator in the subquery, we fake a field to point to it.\n      // This is an attempt to ensure that it a valid criteria.\n\n      if (keys(b).every(isOperator)) {\n        criteria = {\n          temp: b\n        };\n\n        format = function format(x) {\n          return {\n            temp: x\n          };\n        };\n      }\n\n      var query = new Query(criteria);\n\n      for (var i = 0, len = a.length; i < len; i++) {\n        if (query.test(format(a[i]))) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Selects documents if a field is of the specified type.\n   *\n   * @param a\n   * @param b\n   * @returns {boolean}\n   */\n\n  function $type(a, b) {\n    switch (b) {\n      case 1:\n      case 'double':\n        return isNumber(a) && (a + '').indexOf('.') !== -1;\n\n      case 2:\n      case T_STRING:\n        return isString(a);\n\n      case 3:\n      case T_OBJECT:\n        return isObject(a);\n\n      case 4:\n      case T_ARRAY:\n        return isArray(a);\n\n      case 6:\n      case T_UNDEFINED:\n        return isNil(a);\n\n      case 8:\n      case T_BOOL:\n        return isBoolean(a);\n\n      case 9:\n      case T_DATE:\n        return isDate(a);\n\n      case 10:\n      case T_NULL:\n        return isNull(a);\n\n      case 11:\n      case T_REGEX:\n        return isRegExp(a);\n\n      case 16:\n      case 'int':\n        return isNumber(a) && a <= 2147483647 && (a + '').indexOf('.') === -1;\n\n      case 18:\n      case 'long':\n        return isNumber(a) && a > 2147483647 && a <= 9223372036854775807 && (a + '').indexOf('.') === -1;\n\n      case 19:\n      case 'decimal':\n        return isNumber(a);\n\n      default:\n        return false;\n    }\n  }\n\n  function compare$1(a, b, f) {\n    return ensureArray(a).some(function (x) {\n      return getType(x) === getType(b) && f(x, b);\n    });\n  }\n\n  function createComparison(f) {\n    return function (obj, expr) {\n      var args = computeValue(obj, expr);\n      return f(args[0], args[1]);\n    };\n  }\n\n  var $eq$1 = createComparison($eq);\n  var $ne$1 = createComparison($ne);\n  var $gt$1 = createComparison($gt);\n  var $lt$1 = createComparison($lt);\n  var $gte$1 = createComparison($gte);\n  var $lte$1 = createComparison($lte);\n  var $nin$1 = createComparison($nin);\n  /**\n   * Compares two values and returns the result of the comparison as an integer.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $cmp(obj, expr) {\n    var args = computeValue(obj, expr);\n    if (args[0] > args[1]) return 1;\n    if (args[0] < args[1]) return -1;\n    return 0;\n  }\n\n  /**\n   * Conditional operators\n   */\n  /**\n   * A ternary operator that evaluates one expression,\n   * and depending on the result returns the value of one following expressions.\n   *\n   * @param obj\n   * @param expr\n   */\n\n  function $cond(obj, expr) {\n    var ifExpr, thenExpr, elseExpr;\n    var errorMsg = '$cond: invalid arguments';\n\n    if (isArray(expr)) {\n      assert(expr.length === 3, errorMsg);\n      ifExpr = expr[0];\n      thenExpr = expr[1];\n      elseExpr = expr[2];\n    } else {\n      assert(isObject(expr), errorMsg);\n      ifExpr = expr['if'];\n      thenExpr = expr['then'];\n      elseExpr = expr['else'];\n    }\n\n    var condition = computeValue(obj, ifExpr);\n    return condition ? computeValue(obj, thenExpr) : computeValue(obj, elseExpr);\n  }\n  /**\n   * An operator that evaluates a series of case expressions. When it finds an expression which\n   * evaluates to true, it returns the resulting expression for that case. If none of the cases\n   * evaluate to true, it returns the default expression.\n   *\n   * @param obj\n   * @param expr\n   */\n\n  function $switch(obj, expr) {\n    var errorMsg = 'Invalid arguments for $switch operator';\n    assert(expr.branches, errorMsg);\n    var validBranch = expr.branches.find(function (branch) {\n      assert(branch['case'] && branch['then'], errorMsg);\n      return computeValue(obj, branch['case']);\n    });\n\n    if (validBranch) {\n      return computeValue(obj, validBranch.then);\n    } else {\n      assert(expr['default'], errorMsg);\n      return computeValue(obj, expr[\"default\"]);\n    }\n  }\n  /**\n   * Evaluates an expression and returns the first expression if it evaluates to a non-null value.\n   * Otherwise, $ifNull returns the second expression's value.\n   *\n   * @param obj\n   * @param expr\n   * @returns {*}\n   */\n\n  function $ifNull(obj, expr) {\n    assert(isArray(expr) && expr.length === 2, '$ifNull expression must resolve to array(2)');\n    var args = computeValue(obj, expr);\n    return isNil(args[0]) ? args[1] : args[0];\n  }\n\n  /**\n   * Returns the day of the year for a date as a number between 1 and 366 (leap year).\n   * @param obj\n   * @param expr\n   */\n\n  function $dayOfYear(obj, expr) {\n    var d = computeValue(obj, expr);\n    var start = new Date(d.getFullYear(), 0, 0);\n    var diff = d - start;\n    var oneDay = 1000 * 60 * 60 * 24;\n    return Math.round(diff / oneDay);\n  }\n  /**\n   * Returns the day of the month for a date as a number between 1 and 31.\n   * @param obj\n   * @param expr\n   */\n\n  function $dayOfMonth(obj, expr) {\n    var d = computeValue(obj, expr);\n    return d.getDate();\n  }\n  /**\n   * Returns the day of the week for a date as a number between 1 (Sunday) and 7 (Saturday).\n   * @param obj\n   * @param expr\n   */\n\n  function $dayOfWeek(obj, expr) {\n    var d = computeValue(obj, expr);\n    return d.getDay() + 1;\n  }\n  /**\n   * Returns the year for a date as a number (e.g. 2014).\n   * @param obj\n   * @param expr\n   */\n\n  function $year(obj, expr) {\n    var d = computeValue(obj, expr);\n    return d.getFullYear();\n  }\n  /**\n   * Returns the month for a date as a number between 1 (January) and 12 (December).\n   * @param obj\n   * @param expr\n   */\n\n  function $month(obj, expr) {\n    var d = computeValue(obj, expr);\n    return d.getMonth() + 1;\n  }\n  /**\n   * Returns the week number for a date as a number between 0\n   * (the partial week that precedes the first Sunday of the year) and 53 (leap year).\n   * @param obj\n   * @param expr\n   */\n\n  function $week(obj, expr) {\n    // source: http://stackoverflow.com/a/6117889/1370481\n    var d = computeValue(obj, expr); // Copy date so don't modify original\n\n    d = new Date(+d);\n    d.setHours(0, 0, 0); // Set to nearest Thursday: current date + 4 - current day number\n    // Make Sunday's day number 7\n\n    d.setDate(d.getDate() + 4 - (d.getDay() || 7)); // Get first day of year\n\n    var yearStart = new Date(d.getFullYear(), 0, 1); // Calculate full weeks to nearest Thursday\n\n    return Math.floor(((d - yearStart) / 8.64e7 + 1) / 7);\n  }\n  /**\n   * Returns the hour for a date as a number between 0 and 23.\n   * @param obj\n   * @param expr\n   */\n\n  function $hour(obj, expr) {\n    var d = computeValue(obj, expr);\n    return d.getUTCHours();\n  }\n  /**\n   * Returns the minute for a date as a number between 0 and 59.\n   * @param obj\n   * @param expr\n   */\n\n  function $minute(obj, expr) {\n    var d = computeValue(obj, expr);\n    return d.getMinutes();\n  }\n  /**\n   * Returns the seconds for a date as a number between 0 and 60 (leap seconds).\n   * @param obj\n   * @param expr\n   */\n\n  function $second(obj, expr) {\n    var d = computeValue(obj, expr);\n    return d.getSeconds();\n  }\n  /**\n   * Returns the milliseconds of a date as a number between 0 and 999.\n   * @param obj\n   * @param expr\n   */\n\n  function $millisecond(obj, expr) {\n    var d = computeValue(obj, expr);\n    return d.getMilliseconds();\n  } // used for formatting dates in $dateToString operator\n\n  var DATE_SYM_TABLE = {\n    '%Y': [$year, 4],\n    '%m': [$month, 2],\n    '%d': [$dayOfMonth, 2],\n    '%H': [$hour, 2],\n    '%M': [$minute, 2],\n    '%S': [$second, 2],\n    '%L': [$millisecond, 3],\n    '%j': [$dayOfYear, 3],\n    '%w': [$dayOfWeek, 1],\n    '%U': [$week, 2],\n    '%%': '%'\n  };\n  /**\n   * Returns the date as a formatted string.\n   *\n   * %Y  Year (4 digits, zero padded)  0000-9999\n   * %m  Month (2 digits, zero padded)  01-12\n   * %d  Day of Month (2 digits, zero padded)  01-31\n   * %H  Hour (2 digits, zero padded, 24-hour clock)  00-23\n   * %M  Minute (2 digits, zero padded)  00-59\n   * %S  Second (2 digits, zero padded)  00-60\n   * %L  Millisecond (3 digits, zero padded)  000-999\n   * %j  Day of year (3 digits, zero padded)  001-366\n   * %w  Day of week (1-Sunday, 7-Saturday)  1-7\n   * %U  Week of year (2 digits, zero padded)  00-53\n   * %%  Percent Character as a Literal  %\n   *\n   * @param obj current object\n   * @param expr operator expression\n   */\n\n  function $dateToString(obj, expr) {\n    var fmt = expr['format'];\n    var date = computeValue(obj, expr['date']);\n    var matches = fmt.match(/(%%|%Y|%m|%d|%H|%M|%S|%L|%j|%w|%U)/g);\n\n    for (var i = 0, len = matches.length; i < len; i++) {\n      var hdlr = DATE_SYM_TABLE[matches[i]];\n      var value = hdlr;\n\n      if (isArray(hdlr)) {\n        // reuse date operators\n        var fn = hdlr[0];\n        var pad = hdlr[1];\n        value = padDigits(fn(obj, date), pad);\n      } // replace the match with resolved value\n\n\n      fmt = fmt.replace(matches[i], value);\n    }\n\n    return fmt;\n  }\n\n  function padDigits(number, digits) {\n    return new Array(Math.max(digits - String(number).length + 1, 0)).join('0') + number;\n  }\n\n  /**\n   * Return a value without parsing.\n   * @param obj\n   * @param expr\n   */\n  function $literal(obj, expr) {\n    return expr;\n  }\n\n  /**\n   * Returns true if two sets have the same elements.\n   * @param obj\n   * @param expr\n   */\n\n  function $setEquals(obj, expr) {\n    var args = computeValue(obj, expr);\n    var xs = unique(args[0]);\n    var ys = unique(args[1]);\n    return xs.length === ys.length && xs.length === intersection(xs, ys).length;\n  }\n  /**\n   * Returns the common elements of the input sets.\n   * @param obj\n   * @param expr\n   */\n\n  function $setIntersection(obj, expr) {\n    var args = computeValue(obj, expr);\n    return intersection(args[0], args[1]);\n  }\n  /**\n   * Returns elements of a set that do not appear in a second set.\n   * @param obj\n   * @param expr\n   */\n\n  function $setDifference(obj, expr) {\n    var args = computeValue(obj, expr);\n    return args[0].filter(notInArray.bind(null, args[1]));\n  }\n  /**\n   * Returns a set that holds all elements of the input sets.\n   * @param obj\n   * @param expr\n   */\n\n  function $setUnion(obj, expr) {\n    var args = computeValue(obj, expr);\n    return union(args[0], args[1]);\n  }\n  /**\n   * Returns true if all elements of a set appear in a second set.\n   * @param obj\n   * @param expr\n   */\n\n  function $setIsSubset(obj, expr) {\n    var args = computeValue(obj, expr);\n    return intersection(args[0], args[1]).length === args[0].length;\n  }\n  /**\n   * Returns true if any elements of a set evaluate to true, and false otherwise.\n   * @param obj\n   * @param expr\n   */\n\n  function $anyElementTrue(obj, expr) {\n    // mongodb nests the array expression in another\n    var args = computeValue(obj, expr)[0];\n    return args.some(truthy);\n  }\n  /**\n   * Returns true if all elements of a set evaluate to true, and false otherwise.\n   * @param obj\n   * @param expr\n   */\n\n  function $allElementsTrue(obj, expr) {\n    // mongodb nests the array expression in another\n    var args = computeValue(obj, expr)[0];\n    return args.every(truthy);\n  }\n\n  /**\n   * Concatenates two strings.\n   *\n   * @param obj\n   * @param expr\n   * @returns {string|*}\n   */\n\n  function $concat(obj, expr) {\n    var args = computeValue(obj, expr); // does not allow concatenation with nulls\n\n    if ([null, undefined].some(inArray.bind(null, args))) return null;\n    return args.join('');\n  }\n  /**\n   * Searches a string for an occurrence of a substring and returns the UTF-8 code point index of the first occurence.\n   * If the substring is not found, returns -1.\n   *\n   * @param  {Object} obj\n   * @param  {*} expr\n   * @return {*}\n   */\n\n  function $indexOfBytes(obj, expr) {\n    var arr = computeValue(obj, expr);\n    var errorMsg = '$indexOfBytes expression resolves to invalid an argument';\n    if (isNil(arr[0])) return null;\n    assert(isString(arr[0]) && isString(arr[1]), errorMsg);\n    var str = arr[0];\n    var searchStr = arr[1];\n    var start = arr[2];\n    var end = arr[3];\n    var valid = isNil(start) || isNumber(start) && start >= 0 && Math.round(start) === start;\n    valid = valid && (isNil(end) || isNumber(end) && end >= 0 && Math.round(end) === end);\n    assert(valid, errorMsg);\n    start = start || 0;\n    end = end || str.length;\n    if (start > end) return -1;\n    var index = str.substring(start, end).indexOf(searchStr);\n    return index > -1 ? index + start : index;\n  }\n  /**\n   * Splits a string into substrings based on a delimiter.\n   * If the delimiter is not found within the string, returns an array containing the original string.\n   *\n   * @param  {Object} obj\n   * @param  {Array} expr\n   * @return {Array} Returns an array of substrings.\n   */\n\n  function $split(obj, expr) {\n    var args = computeValue(obj, expr);\n    if (isNil(args[0])) return null;\n    assert(args.every(isString), '$split expression must result to array(2) of strings');\n    return args[0].split(args[1]);\n  }\n  /**\n   * Returns the number of UTF-8 encoded bytes in the specified string.\n   *\n   * @param  {Object} obj\n   * @param  {String} expr\n   * @return {Number}\n   */\n\n  function $strLenBytes(obj, expr) {\n    return ~-encodeURI(computeValue(obj, expr)).split(/%..|./).length;\n  }\n  /**\n   * Returns the number of UTF-8 code points in the specified string.\n   *\n   * @param  {Object} obj\n   * @param  {String} expr\n   * @return {Number}\n   */\n\n  function $strLenCP(obj, expr) {\n    return computeValue(obj, expr).length;\n  }\n  /**\n   * Compares two strings and returns an integer that reflects the comparison.\n   *\n   * @param obj\n   * @param expr\n   * @returns {number}\n   */\n\n  function $strcasecmp(obj, expr) {\n    var args = computeValue(obj, expr);\n    var a = args[0];\n    var b = args[1];\n    if (isEqual(a, b) || args.every(isNil)) return 0;\n    assert(args.every(isString), '$strcasecmp must resolve to array(2) of strings');\n    a = a.toUpperCase();\n    b = b.toUpperCase();\n    return a > b && 1 || a < b && -1 || 0;\n  }\n  /**\n   * Returns a substring of a string, starting at a specified index position and including the specified number of characters.\n   * The index is zero-based.\n   *\n   * @param obj\n   * @param expr\n   * @returns {string}\n   */\n\n  function $substrBytes(obj, expr) {\n    var args = computeValue(obj, expr);\n    var s = args[0];\n    var index = args[1];\n    var count = args[2];\n    assert(isString(s) && isNumber(index) && index >= 0 && isNumber(count) && count >= 0, '$substrBytes: invalid arguments');\n    var buf = utf8Encode(s);\n    var validIndex = [];\n    var acc = 0;\n\n    for (var i = 0; i < buf.length; i++) {\n      validIndex.push(acc);\n      acc += buf[i].length;\n    }\n\n    var begin = validIndex.indexOf(index);\n    var end = validIndex.indexOf(index + count);\n    assert(begin > -1 && end > -1, '$substrBytes: invalid range, start or end index is a UTF-8 continuation byte.');\n    return s.substring(begin, end);\n  }\n  /**\n   * Returns a substring of a string, starting at a specified index position and including the specified number of characters.\n   * The index is zero-based.\n   *\n   * @param obj\n   * @param expr\n   * @returns {string}\n   */\n\n  function $substr(obj, expr) {\n    var args = computeValue(obj, expr);\n    var s = args[0];\n    var index = args[1];\n    var count = args[2];\n\n    if (isString(s)) {\n      if (index < 0) {\n        return '';\n      } else if (count < 0) {\n        return s.substr(index);\n      } else {\n        return s.substr(index, count);\n      }\n    }\n\n    return '';\n  }\n  function $substrCP(obj, expr) {\n    return $substr(obj, expr);\n  }\n  /**\n   * Converts a string to lowercase.\n   *\n   * @param obj\n   * @param expr\n   * @returns {string}\n   */\n\n  function $toLower(obj, expr) {\n    var value = computeValue(obj, expr);\n    return isEmpty(value) ? '' : value.toLowerCase();\n  }\n  /**\n   * Converts a string to uppercase.\n   *\n   * @param obj\n   * @param expr\n   * @returns {string}\n   */\n\n  function $toUpper(obj, expr) {\n    var value = computeValue(obj, expr);\n    return isEmpty(value) ? '' : value.toUpperCase();\n  }\n  var UTF8_MASK = [0xC0, 0xE0, 0xF0]; // encodes a unicode code point to a utf8 byte sequence\n  // https://encoding.spec.whatwg.org/#utf-8\n\n  function toUtf8(n) {\n    if (n < 0x80) return [n];\n    var count = n < 0x0800 && 1 || n < 0x10000 && 2 || 3;\n    var offset = UTF8_MASK[count - 1];\n    var utf8 = [(n >> 6 * count) + offset];\n\n    while (count > 0) {\n      utf8.push(0x80 | n >> 6 * --count & 0x3F);\n    }\n\n    return utf8;\n  }\n\n  function utf8Encode(s) {\n    var buf = [];\n\n    for (var i = 0, len = s.length; i < len; i++) {\n      buf.push(toUtf8(s.codePointAt(i)));\n    }\n\n    return buf;\n  }\n\n  /**\n   * Aggregation framework variable operators\n   */\n  /**\n   * Defines variables for use within the scope of a sub-expression and returns the result of the sub-expression.\n   *\n   * @param obj\n   * @param expr\n   * @returns {*}\n   */\n\n  function $let(obj, expr) {\n    var varsExpr = expr['vars'];\n    var inExpr = expr['in']; // resolve vars\n\n    var varsKeys = keys(varsExpr);\n    each(varsKeys, function (key) {\n      var val = computeValue(obj, varsExpr[key]);\n      var tempKey = '$' + key;\n      obj[tempKey] = val;\n    });\n    return computeValue(obj, inExpr);\n  }\n\n  var expressionOperators = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    $abs: $abs,\n    $add: $add,\n    $ceil: $ceil,\n    $divide: $divide,\n    $exp: $exp,\n    $floor: $floor,\n    $ln: $ln,\n    $log: $log,\n    $log10: $log10,\n    $mod: $mod,\n    $multiply: $multiply,\n    $pow: $pow,\n    $round: $round,\n    $sqrt: $sqrt,\n    $subtract: $subtract,\n    $trunc: $trunc,\n    $arrayElemAt: $arrayElemAt,\n    $arrayToObject: $arrayToObject,\n    $concatArrays: $concatArrays,\n    $filter: $filter,\n    $in: $in,\n    $indexOfArray: $indexOfArray,\n    $isArray: $isArray,\n    $map: $map,\n    $objectToArray: $objectToArray,\n    $range: $range,\n    $reduce: $reduce,\n    $reverseArray: $reverseArray,\n    $size: $size,\n    $slice: $slice,\n    $zip: $zip,\n    $mergeObjects: $mergeObjects,\n    $and: $and,\n    $or: $or,\n    $not: $not,\n    $eq: $eq$1,\n    $ne: $ne$1,\n    $gt: $gt$1,\n    $lt: $lt$1,\n    $gte: $gte$1,\n    $lte: $lte$1,\n    $nin: $nin$1,\n    $cmp: $cmp,\n    $cond: $cond,\n    $switch: $switch,\n    $ifNull: $ifNull,\n    $dayOfYear: $dayOfYear,\n    $dayOfMonth: $dayOfMonth,\n    $dayOfWeek: $dayOfWeek,\n    $year: $year,\n    $month: $month,\n    $week: $week,\n    $hour: $hour,\n    $minute: $minute,\n    $second: $second,\n    $millisecond: $millisecond,\n    $dateToString: $dateToString,\n    $literal: $literal,\n    $setEquals: $setEquals,\n    $setIntersection: $setIntersection,\n    $setDifference: $setDifference,\n    $setUnion: $setUnion,\n    $setIsSubset: $setIsSubset,\n    $anyElementTrue: $anyElementTrue,\n    $allElementsTrue: $allElementsTrue,\n    $concat: $concat,\n    $indexOfBytes: $indexOfBytes,\n    $split: $split,\n    $strLenBytes: $strLenBytes,\n    $strLenCP: $strLenCP,\n    $strcasecmp: $strcasecmp,\n    $substrBytes: $substrBytes,\n    $substr: $substr,\n    $substrCP: $substrCP,\n    $toLower: $toLower,\n    $toUpper: $toUpper,\n    $let: $let\n  });\n\n  /**\n   * Returns an array of all values for the selected field among for each document in that group.\n   *\n   * @param collection\n   * @param expr\n   * @returns {Array|*}\n   */\n\n  function $push(collection, expr) {\n    if (isNil(expr)) return collection;\n    return collection.map(function (obj) {\n      return computeValue(obj, expr);\n    });\n  }\n\n  /**\n   * Returns an array of all the unique values for the selected field among for each document in that group.\n   *\n   * @param collection\n   * @param expr\n   * @returns {*}\n   */\n\n  function $addToSet(collection, expr) {\n    return unique($push(collection, expr));\n  }\n\n  /**\n   * Returns an average of all the values in a group.\n   *\n   * @param collection\n   * @param expr\n   * @returns {number}\n   */\n\n  function $avg(collection, expr) {\n    var data = $push(collection, expr).filter(isNumber);\n    var sum = reduce(data, function (acc, n) {\n      return acc + n;\n    }, 0);\n    return sum / (data.length || 1);\n  }\n\n  /**\n   * Returns the first value in a group.\n   *\n   * @param collection\n   * @param expr\n   * @returns {*}\n   */\n\n  function $first(collection, expr) {\n    return collection.length > 0 ? computeValue(collection[0], expr) : undefined;\n  }\n\n  /**\n   * Returns the last value in a group.\n   *\n   * @param collection\n   * @param expr\n   * @returns {*}\n   */\n\n  function $last(collection, expr) {\n    return collection.length > 0 ? computeValue(collection[collection.length - 1], expr) : undefined;\n  }\n\n  /**\n   * Returns the highest value in a group.\n   *\n   * @param collection\n   * @param expr\n   * @returns {*}\n   */\n\n  function $max(collection, expr) {\n    return reduce($push(collection, expr), function (acc, n) {\n      return isNil(acc) || n > acc ? n : acc;\n    }, undefined);\n  }\n\n  /**\n   * Combines multiple documents into a single document.\n   *\n   * @param collection\n   * @param expr\n   * @returns {Array|*}\n   */\n\n  function $mergeObjects$1(collection, expr) {\n    return reduce(collection, function (memo, o) {\n      return Object.assign(memo, computeValue(o, expr));\n    }, {});\n  }\n\n  /**\n   * Returns the lowest value in a group.\n   *\n   * @param collection\n   * @param expr\n   * @returns {*}\n   */\n\n  function $min(collection, expr) {\n    return reduce($push(collection, expr), function (acc, n) {\n      return isNil(acc) || n < acc ? n : acc;\n    }, undefined);\n  }\n\n  /**\n   * Returns the population standard deviation of the input values.\n   *\n   * @param  {Array} collection\n   * @param  {Object} expr\n   * @return {Number}\n   */\n\n  function $stdDevPop(collection, expr) {\n    return stddev($push(collection, expr).filter(isNumber), false);\n  }\n\n  /**\n   * Returns the sample standard deviation of the input values.\n   * @param  {Array} collection\n   * @param  {Object} expr\n   * @return {Number|null}\n   */\n\n  function $stdDevSamp(collection, expr) {\n    return stddev($push(collection, expr).filter(isNumber), true);\n  }\n\n  /**\n   * Returns the sum of all the values in a group.\n   *\n   * @param collection\n   * @param expr\n   * @returns {*}\n   */\n\n  function $sum(collection, expr) {\n    if (!isArray(collection)) return 0; // take a short cut if expr is number literal\n\n    if (isNumber(expr)) return collection.length * expr;\n    return reduce($push(collection, expr).filter(isNumber), function (acc, n) {\n      return acc + n;\n    }, 0);\n  }\n\n  /**\n   * Group stage Accumulator Operators. https://docs.mongodb.com/manual/reference/operator/aggregation-\n   */\n\n  var groupOperators = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    $addToSet: $addToSet,\n    $avg: $avg,\n    $first: $first,\n    $last: $last,\n    $max: $max,\n    $mergeObjects: $mergeObjects$1,\n    $min: $min,\n    $push: $push,\n    $stdDevPop: $stdDevPop,\n    $stdDevSamp: $stdDevSamp,\n    $sum: $sum\n  });\n\n  /**\n   * Adds new fields to documents.\n   * Outputs documents that contain all existing fields from the input documents and newly added fields.\n   *\n   * @param {Array} collection\n   * @param {*} expr\n   * @param {Object} opt Pipeline options\n   */\n\n  function $addFields(collection, expr, opt) {\n    var newFields = keys(expr);\n    if (newFields.length === 0) return collection;\n    return collection.map(function (obj) {\n      var newObj = cloneDeep(obj);\n      each(newFields, function (field) {\n        var newValue = computeValue(obj, expr[field]);\n        setValue(newObj, field, newValue);\n      });\n      return newObj;\n    });\n  }\n  /**\n   * Alias for $addFields.\n   */\n\n  var $set = $addFields;\n\n  /**\n   * Categorizes incoming documents into groups, called buckets, based on a specified expression and bucket boundaries.\n   * https://docs.mongodb.com/manual/reference/operator/aggregation/bucket/\n   *\n   * @param {*} collection\n   * @param {*} expr\n   * @param {Object} opt Pipeline options\n   */\n\n  function $bucket(collection, expr, opt) {\n    var boundaries = expr.boundaries;\n    var defaultKey = expr['default'];\n    var lower = boundaries[0]; // inclusive\n\n    var upper = boundaries[boundaries.length - 1]; // exclusive\n\n    var outputExpr = expr.output || {\n      'count': {\n        '$sum': 1\n      }\n    };\n    assert(boundaries.length > 2, \"$bucket 'boundaries' expression must have at least 3 elements\");\n    var boundType = getType(lower);\n\n    for (var i = 0, len = boundaries.length - 1; i < len; i++) {\n      assert(boundType === getType(boundaries[i + 1]), \"$bucket 'boundaries' must all be of the same type\");\n      assert(boundaries[i] < boundaries[i + 1], \"$bucket 'boundaries' must be sorted in ascending order\");\n    }\n\n    !isNil(defaultKey) && getType(expr[\"default\"]) === getType(lower) && assert(lower > expr[\"default\"] || upper < expr[\"default\"], \"$bucket 'default' expression must be out of boundaries range\");\n    var grouped = {};\n    each(boundaries, function (k) {\n      return grouped[k] = [];\n    }); // add default key if provided\n\n    if (!isNil(defaultKey)) grouped[defaultKey] = [];\n    var iterator = false;\n    return Lazy(function () {\n      if (!iterator) {\n        collection.each(function (obj) {\n          var key = computeValue(obj, expr.groupBy);\n\n          if (isNil(key) || key < lower || key >= upper) {\n            assert(!isNil(defaultKey), '$bucket require a default for out of range values');\n            grouped[defaultKey].push(obj);\n          } else {\n            assert(key >= lower && key < upper, \"$bucket 'groupBy' expression must resolve to a value in range of boundaries\");\n            var index = findInsertIndex(boundaries, key);\n            var boundKey = boundaries[Math.max(0, index - 1)];\n            grouped[boundKey].push(obj);\n          }\n        }); // upper bound is exclusive so we remove it\n\n        boundaries.pop();\n        if (!isNil(defaultKey)) boundaries.push(defaultKey);\n        iterator = Lazy(boundaries).map(function (key) {\n          var acc = accumulate(grouped[key], null, outputExpr);\n          return Object.assign(acc, {\n            '_id': key\n          });\n        });\n      }\n\n      return iterator.next();\n    });\n  }\n\n  /**\n   * Categorizes incoming documents into a specific number of groups, called buckets,\n   * based on a specified expression. Bucket boundaries are automatically determined\n   * in an attempt to evenly distribute the documents into the specified number of buckets.\n   * https://docs.mongodb.com/manual/reference/operator/aggregation/bucketAuto/\n   *\n   * @param {*} collection\n   * @param {*} expr\n   * @param {*} opt Pipeline options\n   */\n\n  function $bucketAuto(collection, expr, opt) {\n    var outputExpr = expr.output || {\n      'count': {\n        '$sum': 1\n      }\n    };\n    var groupByExpr = expr.groupBy;\n    var bucketCount = expr.buckets;\n    assert(bucketCount > 0, \"The $bucketAuto 'buckets' field must be greater than 0, but found: \" + bucketCount);\n    return collection.transform(function (coll) {\n      var approxBucketSize = Math.max(1, Math.round(coll.length / bucketCount));\n      var computeValueOptimized = memoize(computeValue);\n      var grouped = {};\n      var remaining = [];\n      var sorted = sortBy(coll, function (o) {\n        var key = computeValueOptimized(o, groupByExpr);\n\n        if (isNil(key)) {\n          remaining.push(o);\n        } else {\n          grouped[key] || (grouped[key] = []);\n          grouped[key].push(o);\n        }\n\n        return key;\n      });\n      var ID_KEY = idKey();\n      var result = [];\n      var index = 0; // counter for sorted collection\n\n      for (var i = 0, len = sorted.length; i < bucketCount && index < len; i++) {\n        var boundaries = {};\n        var bucketItems = [];\n\n        for (var j = 0; j < approxBucketSize && index < len; j++) {\n          var key = computeValueOptimized(sorted[index], groupByExpr);\n          if (isNil(key)) key = null; // populate current bucket with all values for current key\n\n          into(bucketItems, isNil(key) ? remaining : grouped[key]); // increase sort index by number of items added\n\n          index += isNil(key) ? remaining.length : grouped[key].length; // set the min key boundary if not already present\n\n          if (!has(boundaries, 'min')) boundaries.min = key;\n\n          if (result.length > 0) {\n            var lastBucket = result[result.length - 1];\n            lastBucket[ID_KEY].max = boundaries.min;\n          }\n        } // if is last bucket add remaining items\n\n\n        if (i == bucketCount - 1) {\n          into(bucketItems, sorted.slice(index));\n        }\n\n        result.push(Object.assign(accumulate(bucketItems, null, outputExpr), {\n          '_id': boundaries\n        }));\n      }\n\n      if (result.length > 0) {\n        result[result.length - 1][ID_KEY].max = computeValueOptimized(sorted[sorted.length - 1], groupByExpr);\n      }\n\n      return result;\n    });\n  }\n\n  /**\n   * Returns a document that contains a count of the number of documents input to the stage.\n   *\n   * @param  {Array} collection\n   * @param  {String} expr\n   * @param {Object} opt Pipeline options\n   * @return {Object}\n   */\n\n  function $count(collection, expr, opt) {\n    assert(isString(expr) && expr.trim() !== '' && expr.indexOf('.') === -1 && expr.trim()[0] !== '$', 'Invalid expression value for $count');\n    return Lazy(function () {\n      var o = {};\n      o[expr] = collection.size();\n      return {\n        value: o,\n        done: false\n      };\n    }).first();\n  }\n\n  /**\n   * Processes multiple aggregation pipelines within a single stage on the same set of input documents.\n   * Enables the creation of multi-faceted aggregations capable of characterizing data across multiple dimensions, or facets, in a single stage.\n   */\n\n  function $facet(collection, expr, opt) {\n    return collection.transform(function (array) {\n      return [objectMap(expr, function (pipeline) {\n        return aggregate(array, pipeline);\n      })];\n    });\n  }\n\n  /**\n   * Groups documents together for the purpose of calculating aggregate values based on a collection of documents.\n   *\n   * @param collection\n   * @param expr\n   * @param opt Pipeline options\n   * @returns {Array}\n   */\n\n  function $group(collection, expr, opt) {\n    // lookup key for grouping\n    var ID_KEY = idKey();\n    var id = expr[ID_KEY];\n    return collection.transform(function (coll) {\n      var partitions = groupBy(coll, function (obj) {\n        return computeValue(obj, id, id);\n      }); // remove the group key\n\n      expr = clone(expr);\n      delete expr[ID_KEY];\n      var i = -1;\n      var size = partitions.keys.length;\n      return function () {\n        if (++i === size) return {\n          done: true\n        };\n        var value = partitions.keys[i];\n        var obj = {}; // exclude undefined key value\n\n        if (value !== undefined) {\n          obj[ID_KEY] = value;\n        } // compute remaining keys in expression\n\n\n        each(expr, function (val, key) {\n          obj[key] = accumulate(partitions.groups[i], key, val);\n        });\n        return {\n          value: obj,\n          done: false\n        };\n      };\n    });\n  }\n\n  /**\n   * Restricts the number of documents in an aggregation pipeline.\n   *\n   * @param collection\n   * @param value\n   * @param opt\n   * @returns {Object|*}\n   */\n  function $limit(collection, value, opt) {\n    return collection.take(value);\n  }\n\n  /**\n   * Performs a left outer join to another collection in the same database to filter in documents from the “joined” collection for processing.\n   *\n   * @param collection\n   * @param expr\n   * @param opt\n   */\n\n  function $lookup(collection, expr, opt) {\n    var joinColl = expr.from;\n    var localField = expr.localField;\n    var foreignField = expr.foreignField;\n    var asField = expr.as;\n    assert(isArray(joinColl) && isString(foreignField) && isString(localField) && isString(asField), '$lookup: invalid argument');\n    var hash = {};\n    each(joinColl, function (obj) {\n      var k = hashCode(resolve(obj, foreignField));\n      hash[k] = hash[k] || [];\n      hash[k].push(obj);\n    });\n    return collection.map(function (obj) {\n      var k = hashCode(resolve(obj, localField));\n      var newObj = clone(obj);\n      newObj[asField] = hash[k] || [];\n      return newObj;\n    });\n  }\n\n  /**\n   * Filters the document stream, and only allows matching documents to pass into the next pipeline stage.\n   * $match uses standard MongoDB queries.\n   *\n   * @param collection\n   * @param expr\n   * @param opt\n   * @returns {Array|*}\n   */\n\n  function $match(collection, expr, opt) {\n    var q = new Query(expr);\n    return collection.filter(function (o) {\n      return q.test(o);\n    });\n  }\n\n  /**\n   * Takes the documents returned by the aggregation pipeline and writes them to a specified collection.\n   *\n   * Unlike the $out operator in MongoDB, this operator can appear in any position in the pipeline and is\n   * useful for collecting intermediate results of an aggregation operation.\n   *\n   * @param collection\n   * @param expr\n   * @param opt\n   * @returns {*}\n   */\n\n  function $out(collection, expr, opt) {\n    assert(isArray(expr), '$out expression must be an array');\n    return collection.map(function (o) {\n      expr.push(o);\n      return o; // passthrough\n    });\n  }\n\n  /**\n   * Reshapes a document stream.\n   * $project can rename, add, or remove fields as well as create computed values and sub-documents.\n   *\n   * @param collection\n   * @param expr\n   * @param opt\n   * @returns {Array}\n   */\n\n  function $project(collection, expr, opt) {\n    if (isEmpty(expr)) return collection; // result collection\n\n    var expressionKeys = keys(expr);\n    var idOnlyExcludedExpression = false;\n    var ID_KEY = idKey(); // validate inclusion and exclusion\n\n    validateExpression(expr);\n\n    if (inArray(expressionKeys, ID_KEY)) {\n      var id = expr[ID_KEY];\n\n      if (id === 0 || id === false) {\n        expressionKeys = expressionKeys.filter(notInArray.bind(null, [ID_KEY]));\n        assert(notInArray(expressionKeys, ID_KEY), 'Must not contain collections id key');\n        idOnlyExcludedExpression = isEmpty(expressionKeys);\n      }\n    } else {\n      // if not specified the add the ID field\n      expressionKeys.push(ID_KEY);\n    }\n\n    return collection.map(function (obj) {\n      return processObject(obj, expr, expressionKeys, idOnlyExcludedExpression);\n    });\n  }\n  /**\n   * Process the expression value for $project operators\n   *\n   * @param {Object} obj The object to use as context\n   * @param {Object} expr The experssion object of $project operator\n   * @param {Array} expressionKeys The key in the 'expr' object\n   * @param {Boolean} idOnlyExcludedExpression Boolean value indicating whether only the ID key is excluded\n   */\n\n  function processObject(obj, expr, expressionKeys, idOnlyExcludedExpression) {\n    var ID_KEY = idKey();\n    var newObj = {};\n    var foundSlice = false;\n    var foundExclusion = false;\n    var dropKeys = [];\n\n    if (idOnlyExcludedExpression) {\n      dropKeys.push(ID_KEY);\n    }\n\n    expressionKeys.forEach(function (key) {\n      // final computed value of the key\n      var value; // expression to associate with key\n\n      var subExpr = expr[key];\n\n      if (key !== ID_KEY && inArray([0, false], subExpr)) {\n        foundExclusion = true;\n      }\n\n      if (key === ID_KEY && isEmpty(subExpr)) {\n        // tiny optimization here to skip over id\n        value = obj[key];\n      } else if (isString(subExpr)) {\n        value = computeValue(obj, subExpr, key);\n      } else if (inArray([1, true], subExpr)) ; else if (isArray(subExpr)) {\n        value = subExpr.map(function (v) {\n          var r = computeValue(obj, v);\n          if (isNil(r)) return null;\n          return r;\n        });\n      } else if (isObject(subExpr)) {\n        var subExprKeys = keys(subExpr);\n        var operator = subExprKeys.length > 1 ? false : subExprKeys[0];\n\n        if (inArray(ops(OP_PROJECTION), operator)) {\n          var projectionOperators = OPERATORS[OP_PROJECTION]; // apply the projection operator on the operator expression for the key\n\n          if (operator === '$slice') {\n            // $slice is handled differently for aggregation and projection operations\n            if (ensureArray(subExpr[operator]).every(isNumber)) {\n              // $slice for projection operation\n              value = projectionOperators[operator](obj, subExpr[operator], key);\n              foundSlice = true;\n            } else {\n              // $slice for aggregation operation\n              value = computeValue(obj, subExpr, key);\n            }\n          } else {\n            value = projectionOperators[operator](obj, subExpr[operator], key);\n          }\n        } else {\n          // compute the value for the sub expression for the key\n          if (has(obj, key)) {\n            validateExpression(subExpr);\n            var nestedObj = obj[key];\n            value = isArray(nestedObj) ? nestedObj.map(function (o) {\n              return processObject(o, subExpr, subExprKeys, false);\n            }) : processObject(nestedObj, subExpr, subExprKeys, false);\n          } else {\n            value = computeValue(obj, subExpr, key);\n          }\n        }\n      } else {\n        dropKeys.push(key);\n        return;\n      } // get value with object graph\n\n\n      var objPathValue = resolveObj(obj, key, {\n        preserveMissingValues: true\n      }); // add the value at the path\n\n      if (objPathValue !== undefined) {\n        merge(newObj, objPathValue, {\n          flatten: true\n        });\n      } // if computed add/or remove accordingly\n\n\n      if (notInArray([0, 1, false, true], subExpr)) {\n        if (value === undefined) {\n          removeValue(newObj, key);\n        } else {\n          setValue(newObj, key, value);\n        }\n      }\n    }); // filter out all missing values preserved to support correct merging\n\n    filterMissing(newObj); // if projection included $slice operator\n    // Also if exclusion fields are found or we want to exclude only the id field\n    // include keys that were not explicitly excluded\n\n    if (foundSlice || foundExclusion || idOnlyExcludedExpression) {\n      newObj = Object.assign({}, obj, newObj);\n\n      if (dropKeys.length > 0) {\n        newObj = cloneDeep(newObj);\n        each(dropKeys, function (k) {\n          return removeValue(newObj, k);\n        });\n      }\n    }\n\n    return newObj;\n  }\n  /**\n   * Validate inclusion and exclusion values in expression\n   *\n   * @param {Object} expr The expression given for the projection\n   */\n\n\n  function validateExpression(expr) {\n    var ID_KEY = idKey();\n    var check = [false, false];\n    each(expr, function (v, k) {\n      if (k === ID_KEY) return;\n\n      if (v === 0 || v === false) {\n        check[0] = true;\n      } else if (v === 1 || v === true) {\n        check[1] = true;\n      }\n\n      assert(!(check[0] && check[1]), 'Projection cannot have a mix of inclusion and exclusion.');\n    });\n  }\n\n  /**\n   * Restricts the contents of the documents based on information stored in the documents themselves.\n   *\n   * https://docs.mongodb.com/manual/reference/operator/aggregation/redact/\n   */\n\n  function $redact(collection, expr, opt) {\n    return collection.map(function (obj) {\n      return redactObj(cloneDeep(obj), expr);\n    });\n  }\n\n  /**\n   * Replaces a document with the specified embedded document or new one.\n   * The replacement document can be any valid expression that resolves to a document.\n   *\n   * https://docs.mongodb.com/manual/reference/operator/aggregation/replaceRoot/\n   *\n   * @param  {Array} collection\n   * @param  {Object} expr\n   * @param  {Object} opt\n   * @return {*}\n   */\n\n  function $replaceRoot(collection, expr, opt) {\n    return collection.map(function (obj) {\n      obj = computeValue(obj, expr.newRoot);\n      assert(isObject(obj), '$replaceRoot expression must return an object');\n      return obj;\n    });\n  }\n\n  /**\n   * Randomly selects the specified number of documents from its input.\n   * https://docs.mongodb.com/manual/reference/operator/aggregation/sample/\n   *\n   * @param  {Array} collection\n   * @param  {Object} expr\n   * @param  {Object} opt\n   * @return {*}\n   */\n\n  function $sample(collection, expr, opt) {\n    var size = expr.size;\n    assert(isNumber(size), '$sample size must be a positive integer');\n    return collection.transform(function (xs) {\n      var len = xs.length;\n      var i = -1;\n      return function () {\n        if (++i === size) return {\n          done: true\n        };\n        var n = Math.floor(Math.random() * len);\n        return {\n          value: xs[n],\n          done: false\n        };\n      };\n    });\n  }\n\n  /**\n   * Skips over a specified number of documents from the pipeline and returns the rest.\n   *\n   * @param collection\n   * @param value\n   * @param  {Object} opt\n   * @returns {*}\n   */\n  function $skip(collection, value, opt) {\n    return collection.drop(value);\n  }\n\n  /**\n   * Takes all input documents and returns them in a stream of sorted documents.\n   *\n   * @param collection\n   * @param sortKeys\n   * @param  {Object} opt\n   * @returns {*}\n   */\n\n  function $sort(collection, sortKeys, opt) {\n    if (isEmpty(sortKeys) || !isObject(sortKeys)) return collection;\n    opt = opt || {};\n    var cmp = compare;\n    var collationSpec = opt['collation']; // use collation comparator if provided\n\n    if (isObject(collationSpec) && isString(collationSpec.locale)) {\n      cmp = collationComparator(collationSpec);\n    }\n\n    return collection.transform(function (coll) {\n      var modifiers = keys(sortKeys);\n      each(modifiers.reverse(), function (key) {\n        var grouped = groupBy(coll, function (obj) {\n          return resolve(obj, key);\n        });\n        var sortedIndex = {};\n        var indexKeys = sortBy(grouped.keys, function (k, i) {\n          sortedIndex[k] = i;\n          return k;\n        }, cmp);\n        if (sortKeys[key] === -1) indexKeys.reverse();\n        coll = [];\n        each(indexKeys, function (k) {\n          return into(coll, grouped.groups[sortedIndex[k]]);\n        });\n      });\n      return coll;\n    });\n  } // MongoDB collation strength to JS localeCompare sensitivity mapping.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\n  var COLLATION_STRENGTH = {\n    // Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A.\n    1: 'base',\n    //  Only strings that differ in base letters or accents and other diacritic marks compare as unequal.\n    // Examples: a ≠ b, a ≠ á, a = A.\n    2: 'accent',\n    // Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal.\n    // Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A\n    3: 'variant' // case - Only strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A.\n\n  };\n  /**\n   * Creates a comparator function for the given collation spec. See https://docs.mongodb.com/manual/reference/collation/\n   *\n   * @param spec {Object} The MongoDB collation spec.\n   * {\n   *   locale: <string>,\n   *   caseLevel: <boolean>,\n   *   caseFirst: <string>,\n   *   strength: <int>,\n   *   numericOrdering: <boolean>,\n   *   alternate: <string>,\n   *   maxVariable: <string>, // unsupported\n   *   backwards: <boolean> // unsupported\n   * }\n   */\n\n  function collationComparator(spec) {\n    var localeOpt = {\n      sensitivity: COLLATION_STRENGTH[spec.strength || 3],\n      caseFirst: spec.caseFirst === 'off' ? 'false' : spec.caseFirst || 'false',\n      numeric: spec.numericOrdering || false,\n      ignorePunctuation: spec.alternate === 'shifted'\n    }; // when caseLevel is true for strength  1:base and 2:accent, bump sensitivity to the nearest that supports case comparison\n\n    if ((spec.caseLevel || false) === true) {\n      if (localeOpt.sensitivity === 'base') localeOpt.sensitivity = 'case';\n      if (localeOpt.sensitivity === 'accent') localeOpt.sensitivity = 'variant';\n    }\n\n    var collator = new Intl.Collator(spec.locale, localeOpt);\n    return function (a, b) {\n      // non strings\n      if (!isString(a) || !isString(b)) return compare(a, b); // only for strings\n\n      var i = collator.compare(a, b);\n      if (i < 0) return -1;\n      if (i > 0) return 1;\n      return 0;\n    };\n  }\n\n  /**\n   * Groups incoming documents based on the value of a specified expression,\n   * then computes the count of documents in each distinct group.\n   *\n   * https://docs.mongodb.com/manual/reference/operator/aggregation/sortByCount/\n   *\n   * @param  {Array} collection\n   * @param  {Object} expr\n   * @param  {Object} opt\n   * @return {*}\n   */\n\n  function $sortByCount(collection, expr, opt) {\n    var newExpr = {\n      count: {\n        $sum: 1\n      }\n    };\n    newExpr[idKey()] = expr;\n    return $sort($group(collection, newExpr), {\n      count: -1\n    }, opt);\n  }\n\n  /**\n   * Takes an array of documents and returns them as a stream of documents.\n   *\n   * @param collection\n   * @param expr\n   * @param  {Object} opt\n   * @returns {Array}\n   */\n\n  function $unwind(collection, expr, opt) {\n    if (isString(expr)) {\n      expr = {\n        path: expr\n      };\n    }\n\n    var field = expr.path.substr(1);\n    var includeArrayIndex = expr.includeArrayIndex || false;\n    var preserveNullAndEmptyArrays = expr.preserveNullAndEmptyArrays || false;\n\n    var format = function format(o, i) {\n      if (includeArrayIndex !== false) o[includeArrayIndex] = i;\n      return o;\n    };\n\n    var value;\n    return Lazy(function () {\n      var _loop = function _loop() {\n        // take from lazy sequence if available\n        if (Lazy.isIterator(value)) {\n          var tmp = value.next();\n          if (!tmp.done) return {\n            v: tmp\n          };\n        } // fetch next object\n\n\n        var obj = collection.next();\n        if (obj.done) return {\n          v: obj\n        }; // unwrap value\n\n        obj = obj.value; // get the value of the field to unwind\n\n        value = resolve(obj, field); // throw error if value is not an array???\n\n        if (isArray(value)) {\n          if (value.length === 0 && preserveNullAndEmptyArrays === true) {\n            value = null; // reset unwind value\n\n            var _tmp = cloneDeep(obj);\n\n            removeValue(_tmp, field);\n            return {\n              v: {\n                value: format(_tmp, null),\n                done: false\n              }\n            };\n          } else {\n            // construct a lazy sequence for elements per value\n            value = Lazy(value).map(function (item, i) {\n              var tmp = cloneDeep(obj);\n              setValue(tmp, field, item);\n              return format(tmp, i);\n            });\n          }\n        } else if (!isEmpty(value) || preserveNullAndEmptyArrays === true) {\n          var _tmp2 = cloneDeep(obj);\n\n          return {\n            v: {\n              value: format(_tmp2, null),\n              done: false\n            }\n          };\n        }\n      };\n\n      while (true) {\n        var _ret = _loop();\n\n        if (_typeof(_ret) === \"object\") return _ret.v;\n      }\n    });\n  }\n\n  /**\n   * Pipeline Aggregation Stages. https://docs.mongodb.com/manual/reference/operator/aggregation-\n   */\n\n  var pipelineOperators = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    $addFields: $addFields,\n    $set: $set,\n    $bucket: $bucket,\n    $bucketAuto: $bucketAuto,\n    $count: $count,\n    $facet: $facet,\n    $group: $group,\n    $limit: $limit,\n    $lookup: $lookup,\n    $match: $match,\n    $out: $out,\n    $project: $project,\n    $redact: $redact,\n    $replaceRoot: $replaceRoot,\n    $sample: $sample,\n    $skip: $skip,\n    $sort: $sort,\n    $sortByCount: $sortByCount,\n    $unwind: $unwind\n  });\n\n  /**\n   * Projection Operators. https://docs.mongodb.com/manual/reference/operator/projection/\n   */\n  /**\n   * Projects the first element in an array that matches the query condition.\n   *\n   * @param obj\n   * @param field\n   * @param expr\n   */\n\n  function $(obj, expr, field) {\n    err('$ not implemented');\n  }\n  /**\n   * Projects only the first element from an array that matches the specified $elemMatch condition.\n   *\n   * @param obj\n   * @param field\n   * @param expr\n   * @returns {*}\n   */\n\n  function $elemMatch$1(obj, expr, field) {\n    var arr = resolve(obj, field);\n    var query = new Query(expr);\n    assert(isArray(arr), '$elemMatch: invalid argument');\n\n    for (var i = 0; i < arr.length; i++) {\n      if (query.test(arr[i])) return [arr[i]];\n    }\n\n    return undefined;\n  }\n  /**\n   * Limits the number of elements projected from an array. Supports skip and limit slices.\n   *\n   * @param obj\n   * @param field\n   * @param expr\n   */\n\n  function $slice$1(obj, expr, field) {\n    var xs = resolve(obj, field);\n    if (!isArray(xs)) return xs;\n\n    if (isArray(expr)) {\n      return slice(xs, expr[0], expr[1]);\n    } else {\n      assert(isNumber(expr), '$slice: invalid arguments for projection');\n      return slice(xs, expr);\n    }\n  }\n\n  var projectionOperators = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    $: $,\n    $elemMatch: $elemMatch$1,\n    $slice: $slice$1\n  });\n\n  // Query and Projection Operators. https://docs.mongodb.com/manual/reference/operator/query/\n\n  function createQueryOperator(pred) {\n    return function (selector, value) {\n      return function (obj) {\n        // value of field must be fully resolved.\n        var lhs = resolve(obj, selector, {\n          meta: true\n        });\n        lhs = unwrap(lhs.result, lhs.depth);\n        return pred(lhs, value);\n      };\n    };\n  }\n\n  var $all$1 = createQueryOperator($all);\n  var $elemMatch$2 = createQueryOperator($elemMatch);\n  var $eq$2 = createQueryOperator($eq);\n  var $exists$1 = createQueryOperator($exists);\n  var $gt$2 = createQueryOperator($gt);\n  var $gte$2 = createQueryOperator($gte);\n  var $in$2 = createQueryOperator($in$1);\n  var $lt$2 = createQueryOperator($lt);\n  var $lte$2 = createQueryOperator($lte);\n  var $mod$2 = createQueryOperator($mod$1);\n  var $ne$2 = createQueryOperator($ne);\n  var $nin$2 = createQueryOperator($nin);\n  var $regex$1 = createQueryOperator($regex);\n  var $size$2 = createQueryOperator($size$1);\n  var $type$1 = createQueryOperator($type);\n  /**\n   * Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.\n   *\n   * @param selector\n   * @param value\n   * @returns {Function}\n   */\n\n  function $and$1(selector, value) {\n    assert(isArray(value), 'Invalid expression: $and expects value to be an Array');\n    var queries = [];\n    each(value, function (expr) {\n      return queries.push(new Query(expr));\n    });\n    return function (obj) {\n      for (var i = 0; i < queries.length; i++) {\n        if (!queries[i].test(obj)) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  /**\n   * Joins query clauses with a logical OR returns all documents that match the conditions of either clause.\n   *\n   * @param selector\n   * @param value\n   * @returns {Function}\n   */\n\n  function $or$1(selector, value) {\n    assert(isArray(value), 'Invalid expression. $or expects value to be an Array');\n    var queries = [];\n    each(value, function (expr) {\n      return queries.push(new Query(expr));\n    });\n    return function (obj) {\n      for (var i = 0; i < queries.length; i++) {\n        if (queries[i].test(obj)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  }\n  /**\n   * Joins query clauses with a logical NOR returns all documents that fail to match both clauses.\n   *\n   * @param selector\n   * @param value\n   * @returns {Function}\n   */\n\n  function $nor(selector, value) {\n    assert(isArray(value), 'Invalid expression. $nor expects value to be an Array');\n    var f = $or$1('$or', value);\n    return function (obj) {\n      return !f(obj);\n    };\n  }\n  /**\n   * Inverts the effect of a query expression and returns documents that do not match the query expression.\n   *\n   * @param selector\n   * @param value\n   * @returns {Function}\n   */\n\n  function $not$1(selector, value) {\n    var criteria = {};\n    criteria[selector] = normalize(value);\n    var query = new Query(criteria);\n    return function (obj) {\n      return !query.test(obj);\n    };\n  }\n  /**\n   * Matches documents that satisfy a JavaScript expression.\n   *\n   * @param selector\n   * @param value\n   * @returns {Function}\n   */\n\n  function $where(selector, value) {\n    if (!isFunction(value)) {\n      value = new Function('return ' + value + ';');\n    }\n\n    return function (obj) {\n      return value.call(obj) === true;\n    };\n  }\n  /**\n   * Allows the use of aggregation expressions within the query language.\n   *\n   * @param selector\n   * @param value\n   * @returns {Function}\n   */\n\n  function $expr(selector, value) {\n    return function (obj) {\n      return computeValue(obj, value);\n    };\n  }\n\n  var queryOperators = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    $all: $all$1,\n    $elemMatch: $elemMatch$2,\n    $eq: $eq$2,\n    $exists: $exists$1,\n    $gt: $gt$2,\n    $gte: $gte$2,\n    $in: $in$2,\n    $lt: $lt$2,\n    $lte: $lte$2,\n    $mod: $mod$2,\n    $ne: $ne$2,\n    $nin: $nin$2,\n    $regex: $regex$1,\n    $size: $size$2,\n    $type: $type$1,\n    $and: $and$1,\n    $or: $or$1,\n    $nor: $nor,\n    $not: $not$1,\n    $where: $where,\n    $expr: $expr\n  });\n\n  var OPERATORS = {};\n  OPERATORS[OP_EXPRESSION] = {};\n  OPERATORS[OP_GROUP] = {};\n  OPERATORS[OP_PIPELINE] = {};\n  OPERATORS[OP_PROJECTION] = {};\n  OPERATORS[OP_QUERY] = {};\n  var SYSTEM_OPERATORS = [[OP_EXPRESSION, expressionOperators], [OP_GROUP, groupOperators], [OP_PIPELINE, pipelineOperators], [OP_PROJECTION, projectionOperators], [OP_QUERY, queryOperators]];\n  /**\n   * Enables the default operators of the system\n   */\n\n  function enableSystemOperators() {\n    each(SYSTEM_OPERATORS, function (arr) {\n      var _arr = _slicedToArray(arr, 2),\n          cls = _arr[0],\n          values = _arr[1];\n\n      Object.assign(OPERATORS[cls], values);\n    });\n  }\n  /**\n   * Add new operators\n   *\n   * @param opClass the operator class to extend\n   * @param fn a function returning an object of new operators\n   */\n\n  function addOperators(opClass, fn) {\n    var newOperators = fn(_internal()); // ensure correct type specified\n\n    assert(has(OPERATORS, opClass), \"Invalid operator class \".concat(opClass));\n    var operators = OPERATORS[opClass]; // check for existing operators\n\n    each(newOperators, function (_, op) {\n      assert(/^\\$[a-zA-Z0-9_]*$/.test(op), \"Invalid operator name \".concat(op));\n      assert(!has(operators, op), \"\".concat(op, \" already exists for '\").concat(opClass, \"' operators\"));\n    });\n    var wrapped = {};\n\n    switch (opClass) {\n      case OP_QUERY:\n        each(newOperators, function (fn, op) {\n          fn = fn.bind(newOperators);\n\n          wrapped[op] = function (selector, value) {\n            return function (obj) {\n              // value of field must be fully resolved.\n              var lhs = resolve(obj, selector);\n              var result = fn(selector, lhs, value);\n              assert(isBoolean(result), \"\".concat(op, \" must return a boolean\"));\n              return result;\n            };\n          };\n        });\n        break;\n\n      case OP_PROJECTION:\n        each(newOperators, function (fn, op) {\n          fn = fn.bind(newOperators);\n\n          wrapped[op] = function (obj, expr, selector) {\n            var lhs = resolve(obj, selector);\n            return fn(selector, lhs, expr);\n          };\n        });\n        break;\n\n      default:\n        each(newOperators, function (fn, op) {\n          wrapped[op] = function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            return fn.apply(newOperators, args);\n          };\n        });\n    } // toss the operator salad :)\n\n\n    Object.assign(OPERATORS[opClass], wrapped);\n  }\n\n  /**\n   * Mixin for Collection types that provide a method `toJSON() -> Array[Object]`\n   */\n\n  var CollectionMixin = {\n    /**\n     * Runs a query and returns a cursor to the result\n     * @param criteria\n     * @param projection\n     * @returns {Cursor}\n     */\n    query: function query(criteria, projection) {\n      return new Query(criteria).find(this.toJSON(), projection);\n    },\n\n    /**\n     * Runs the given aggregation operators on this collection\n     * @params pipeline\n     * @returns {Array}\n     */\n    aggregate: function aggregate(pipeline) {\n      return new Aggregator(pipeline).run(this.toJSON());\n    }\n  };\n\n  enableSystemOperators();\n  var VERSION = '2.5.3'; // mingo!\n\n  var index = {\n    _internal: _internal,\n    Aggregator: Aggregator,\n    CollectionMixin: CollectionMixin,\n    Cursor: Cursor,\n    Lazy: Lazy,\n    OP_EXPRESSION: OP_EXPRESSION,\n    OP_GROUP: OP_GROUP,\n    OP_PIPELINE: OP_PIPELINE,\n    OP_PROJECTION: OP_PROJECTION,\n    OP_QUERY: OP_QUERY,\n    Query: Query,\n    VERSION: VERSION,\n    addOperators: addOperators,\n    aggregate: aggregate,\n    find: find,\n    remove: remove,\n    setup: setup\n  };\n\n  return index;\n\n})));\n\n},{}]},{},[1]);\n"]}